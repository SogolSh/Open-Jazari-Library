/*
 * The MIT License
 *
 * Copyright 2018 BAP1.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */


/**
 * B. CMatrix class is a core class of Open Cezeri Library (OCL) and it is
 * implemented by Dr.Musa ATAŞ who is the instructor and principal coordinator
 * at the Department of Computer Engineering and so called El-Cezeri Cybernetics
 * and Vision Laboratory, respectively.
 *
 * Important Remarks(last updated at 04.11.2014)
 *
 * 1- Note that CMatrix is implemented as a Static Factory Design Pattern
 * approach. Therefore you can not build an object directly via the constructor.
 * Rather, instance or object can be generated by calling getInstance methods
 * and its overloaded methods. For example CMatrix obj=new CMatrix() is not
 * working, hence instead of this type of calling convention try to type
 * CMatrix.getInstance(); or any other variants of getInstance.
 *
 * 2- Almost all methods of CMatrix returns CMatrix even if you want to use
 * image processing or any other specialized classes. Users in fact doesn't know
 * which external classes are used and what's the algorithms inside the calling
 * methods.
 *
 * 3- In some cases, especially in the case of deep learning, builder pattern is
 * proposed. As a result, until the build() command CMatrix does not returned
 * from any subsequent builder methods.
 *
 * 4- if you encounter the github push authentication not supported problem
 * try this
 *
 * --locale on some Windows platforms makes netbeans crash. Preffer to use "-J-Duser.language=en -J-Duser.region=US"
 *
 * Find netbeans etc, likely at the C:\Program Files\NetBeans 7.3\etc
 * Open netbeans.conf
 * Find netbeans_default_options
 * Add those options, so: netbeans_default_options="blablabla -J-Duser.language=en -J-Duser.region=US"
 * Save file
 * Restart/start netbeans.
 * https://blogs.oracle.com/tao/entry/set_netbeans_user_interface_language
 * 
 * 
 * readme
 *Open Jazari Library for Java (OJL4J) 
 * Open Jazari Library for Java (OJL4J), formerly known as Open Cezeri Library is a Java based Matrix, Vectorization, Image Processing, Machine Learning (Weka + DL4J), Data Visualization and Analysis DSL (Domain Specific Language) which enables developers write just single line of code. It achieves this simplicity and ease of use by applying Fluent Interface and/or Method Chaining design pattern principle. Researchers, students, academicians and developers can code with their prior knowledge. Forexample, if he has already known Matlab methods such as plot, imshow he can easily find the similar methods in the OJL. It is also true for Python developer.

You can refer this article and blog site for further information Ataş, Musa. "Open Cezeri Library: A novel java based matrix and computer vision framework." Computer Applications in Engineering Education (2016).

https://open-cezeri-library.blogspot.com/

https://www.youtube.com/watch?v=XiL8RtApi78
 *
 */
package com.cezerilab.openjazarilibrary.core;

import com.cezerilab.openjazarilibrary.types.CRectangle;
import com.cezerilab.openjazarilibrary.types.CSize;
import com.cezerilab.openjazarilibrary.types.CPoint;
import com.cezerilab.openjazarilibrary.types.CReturn;
import com.cezerilab.openjazarilibrary.factory.FactoryMatrix;
import com.cezerilab.openjazarilibrary.javafx.ControllerFXCharts;
import com.cezerilab.openjazarilibrary.types.TMatrixOperator;
import com.cezerilab.openjazarilibrary.types.TMatrixCell;
import com.cezerilab.openjazarilibrary.ml.feature.extraction.FeatureExtractionLBP;
import com.cezerilab.openjazarilibrary.ml.feature.extraction.FeatureExtractionPistachio;
import com.cezerilab.openjazarilibrary.ml.feature.extraction.FeatureExtractionRingProjection;
import com.cezerilab.openjazarilibrary.javafx.FXCharts;
import com.cezerilab.openjazarilibrary.gui.frame.FrameBar;
import com.cezerilab.openjazarilibrary.gui.frame.FrameDataGrid;
import com.cezerilab.openjazarilibrary.gui.frame.FrameHistogram;
import com.cezerilab.openjazarilibrary.gui.frame.FramePlot;
import com.cezerilab.openjazarilibrary.gui.frame.FrameScatterPlot;
import com.cezerilab.openjazarilibrary.gui.frame.FrameImageHistogram;
import com.cezerilab.openjazarilibrary.gui.frame.FrameImage;
import com.cezerilab.openjazarilibrary.types.TFigureAttribute;
import com.cezerilab.openjazarilibrary.utils.GrayScale;
import com.cezerilab.openjazarilibrary.factory.FactoryImageProcess;
import com.cezerilab.openjazarilibrary.utils.SobelEdgeDetector;
import com.cezerilab.openjazarilibrary.utils.ReaderCSV;
import com.cezerilab.openjazarilibrary.factory.FactoryNormalization;
import com.cezerilab.openjazarilibrary.factory.FactoryUtils;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.Serializable;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.application.Application;
import javafx.application.Platform;
import javax.swing.JFrame;
import org.opencv.core.Mat;
import com.cezerilab.openjazarilibrary.utils.TransformFFT;
import com.cezerilab.openjazarilibrary.utils.TransformRadon;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.converters.ConverterUtils;
import weka.core.matrix.EigenvalueDecomposition;
import weka.core.matrix.Matrix;

//enum Dimension {
//    row, column
//}

/**
 *
 * @author BAP1
 */
public final class CMatrix implements Serializable {

    public String name = "Matrix";
    private double[][] array;
    transient private BufferedImage image;
    private String imagePath;
    private CMatrix prevMatrix;
    private CMatrix nextMatrix;
    public CReturn returnedValue;
    private static long currentTime = System.nanoTime();
    private boolean hold_on = false;
    private Instances wekaInstance = null;
    public static FrameImage frameImage = null;
    private static FramePlot framePlot = null;
    public String plotType = "-";
    private static boolean isPlotFXLaunched = false;
    private List<String> columnNames = new ArrayList();
    private List classLabels = new ArrayList();
    private double[] xData4FX;
    //public static CMatrix lastCM;
    private static Random random = new SecureRandom();

    public void runOnce() {
        if (!isPlotFXLaunched) {
            new Thread(() -> {
//                Platform.setImplicitExit(false);
                Application.launch(FXCharts.class, new String[1]);
            }).start();
            isPlotFXLaunched = true;
        }
    }

    public CMatrix buildFrameImage() {
        if (frameImage == null) {
            frameImage = new FrameImage();
            frameImage.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        }
        return this;
    }

    public CMatrix buildFramePlot() {
        if (framePlot == null) {
            framePlot = new FramePlot(this);
            framePlot.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        }
        return this;
    }

    public Instances getWekaInstance() {
        return wekaInstance;
    }

    public CMatrix setWekaInstance(Instances wekaInstance) {
        this.wekaInstance = wekaInstance;
        this.wekaInstance.setClassIndex(this.wekaInstance.numAttributes() - 1);
        return CMatrix.fromInstances(this.wekaInstance);
    }

    public int getRowNumber() {
        return array.length;
    }

    public int getColumnNumber() {
        return array[0].length;
    }

    public BufferedImage getImage() {
        return image;
    }

    public CMatrix setImage(BufferedImage image) {
        this.image = image;
        this.array = FactoryImageProcess.imageToPixelsDouble(GrayScale.luminosity(this.image));
        return this;
    }

    /**
     * calling conventions of static factory method pattern
     *
     * @return 1x1 CMatrix instance
     */
    public static CMatrix getInstance() {
        CMatrix cm = new CMatrix();
        return cm;
    }

    /**
     * calling conventions of static factory method pattern
     *
     * @param lst : take ArrayList as an argument
     * @return 1x1 CMatrix instance
     */
    public static CMatrix getInstance(ArrayList lst) {
        CMatrix cm = new CMatrix();
        cm = cm.fromArrayList(lst);
        return cm;
    }

    /**
     * calling conventions of static factory method pattern
     *
     * @param lst take List as an argument
     * @return 1x1 CMatrix instance
     */
    public static CMatrix getInstance(List lst) {
        CMatrix cm = new CMatrix();
        cm = cm.fromList(lst);
        return cm;
    }

    /**
     * calling conventions of static factory method pattern
     *
     * @param c take CMatrix as an argument
     * @return 1x1 CMatrix instance
     */
    public static CMatrix getInstance(CMatrix c) {
        CMatrix cm = c.clonePure();
        return cm;
    }

    /**
     * try to locate previous matrix if it exists
     *
     * @return previous Matrix
     */
    public CMatrix prev() {
        if (prevMatrix == null) {
            return this;
        }
        prevMatrix.nextMatrix = this;
        return prevMatrix;
    }

    /**
     * try to locate n previous matrix if it exists
     *
     * @param n integer number
     * @return previous Matrix
     */
    public CMatrix prev(int n) {
        for (int i = 0; i < n - 1; i++) {
            prevMatrix = prevMatrix.prev();
        }
        return prevMatrix;
    }

    /**
     * try to locate first cezeri matrix
     *
     * @return previous Matrix
     */
    public CMatrix prevFirst() {
        while (prevMatrix.prevMatrix != null) {
            prevMatrix = prevMatrix.prev();
        }
        return prevMatrix;
    }

    /**
     * try to locate next matrix if it exists
     *
     * @return next Matrix
     */
    public CMatrix next() {
        if (nextMatrix == null) {
            return this;
        }
        nextMatrix.prevMatrix = this;
        return nextMatrix;
    }

    /**
     * try to locate n next matrix if it exists
     *
     * @param n integer number
     * @return next Matrix
     */
    public CMatrix next(int n) {
        for (int i = 0; i < n - 1; i++) {
            nextMatrix = nextMatrix.next();
        }
        return nextMatrix;
    }

    /**
     * try to locate last cezeri matrix
     *
     * @return previous Matrix
     */
    public CMatrix nextLast() {
        while (nextMatrix.nextMatrix != null) {
            nextMatrix = nextMatrix.next();
        }
        return nextMatrix;
    }

    /**
     * generate nxn zero matrix
     *
     * @param n integer number
     * @return CMatrix
     */
    public static CMatrix getInstance(int n) {
        return new CMatrix(n);
    }

    /**
     * generate mxn zero matrix
     *
     * @param m : number of rows
     * @param n : number of columns
     * @return CMatrix
     */
    public static CMatrix getInstance(int m, int n) {
        return new CMatrix(m, n);
    }

    /**
     * generate nr x nc with double value matrix
     *
     * @param nr : number of rows
     * @param nc : number of columns
     * @param value : double initial value
     * @return CMatrix
     */
    public static CMatrix getInstance(int nr, int nc, double value) {
        return new CMatrix(nr, nc).addScalar(value);
    }

    /**
     * generate matrix of img size, and values corresponding
     *
     * @param img : BufferedImage
     * @return CMatrix
     */
    public static CMatrix getInstance(BufferedImage img) {
        if (img == null) {
            return new CMatrix();
        }
        return new CMatrix(img);
    }

    /**
     * generate nxn zero matrix
     *
     * @param n:double (number of rows and columns)
     * @return CMatrix
     */
    public static CMatrix getInstance(double n) {
        return new CMatrix(n);
    }

    /**
     * generate single row of matrix where number of colums equals to the length
     * of the array
     *
     * @param d: array of int
     * @return CMatrix double type
     */
    public static CMatrix getInstance(int[] d) {
        return new CMatrix(d);
    }

    /**
     * generate single row of matrix where number of colums equals to the length
     * of the array
     *
     * @param d: array of int
     * @return CMatrix double type
     */
    public static CMatrix getInstance(byte[] d) {
        return new CMatrix(d);
    }

    /**
     * generate single row of matrix where number of colums equals to the length
     * of the array
     *
     * @param d: array of int
     * @return CMatrix double type
     */
    public static CMatrix getInstance(float[] d) {
        return new CMatrix(d);
    }

    /**
     * generate single row of matrix where number of colums equals to the length
     * of the array
     *
     * @param d: array of int
     * @return CMatrix double type
     */
    public static CMatrix getInstance(double[] d) {
        return new CMatrix(d);
    }

    /**
     * generate a matrix that has d.length of rows and d[0].length of columns
     *
     * @param d: double array of int
     * @return CMatrix double type
     */
    public static CMatrix getInstance(int[][] d) {
        return new CMatrix(d);
    }

    /**
     * generate a matrix that has d.length of rows and d[0].length of columns
     *
     * @param d: double array of int
     * @return CMatrix double type
     */
    public static CMatrix getInstance(byte[][] d) {
        return new CMatrix(d);
    }

    /**
     * generate a matrix that has d.length of rows and d[0].length of columns
     *
     * @param d: double array of int
     * @return CMatrix double type
     */
    public static CMatrix getInstance(float[][] d) {
        return new CMatrix(d);
    }

    /**
     * generate a matrix that has d.length of rows and d[0].length of columns
     *
     * @param d: double array of int
     * @return CMatrix double type
     */
    public static CMatrix getInstance(double[][] d) {
        return new CMatrix(d);
    }

    /**
     * generate a matrix from open cv mat object
     *
     * @param m Mat argument
     * @return CMatrix
     */
    public static CMatrix getInstance(Mat m) {
        double[][] d = FactoryImageProcess.imageToPixels2DFromOpenCV(m);
        return new CMatrix(d);
    }

    /**
     * generate a matrix from the text file choosen, assuming item separator is
     * ;
     *
     * @return CMatrix
     */
    public static CMatrix getInstanceFromFile() {
        double[][] d = FactoryUtils.readFromFile();
        return new CMatrix(d);
    }

    /**
     * generate a matrix from the text file choosen, assuming item separator is
     * token
     *
     * @param token String argument
     * @return CMatrix double type
     */
    public static CMatrix getInstanceFromFile(String token) {
        double[][] d = FactoryUtils.readFromFile(token);
        return new CMatrix(d);
    }

    /**
     * generate a matrix from the text file chosen, assuming item separator is
     * token
     *
     * @param fileName String
     * @param token String
     * @return CMatrix
     */
    public static CMatrix getInstanceFromFile(String fileName, String token) {
        double[][] d = FactoryUtils.readFromFile(fileName, token);
        return new CMatrix(d);
    }

    /**
     * getInstancesFromARFF
     * 
     * @param m Instances
     * @return CMatrix
     */
    public static CMatrix getInstancesFromARFF(Instances m) {
        return fromInstances(m);
    }

    /**
     * generate a matrix from instances of Weka format
     *
     * @param m : Weka instances
     * @return CMatrix
     */
    public static CMatrix fromInstances(Instances m) {
        double[][] ret = new double[m.numInstances()][m.numAttributes()];
        for (int i = 0; i < m.numInstances(); i++) {
            Instance ins = m.instance(i);
            ret[i] = ins.toDoubleArray();
        }
        CMatrix cm = new CMatrix(ret);
        cm.wekaInstance = m;
        return cm;
    }

    /**
     * read Weka ARFF file format 2D data into CMatrix
     *
     * @param path : arff file path
     * @return CMatrix
     */
    public static CMatrix getInstanceFromARFF(String path) {
        return fromARFF(path);
    }

    /**
     * read Excel sheet and transform data into CMatrix double[][] format
     *
     * @param path:excel file path
     * @return CMatrix
     */
    public static CMatrix getInstanceFromExcelCSV(String path) {
        return new CMatrix(FactoryUtils.readCSV(path, ',', 0));
    }

    /**
     * read Excel sheet and transform data into CMatrix double[][] format
     *
     * @param path:excel file path
     * @param seperator
     * @param headerline
     * @return CMatrix
     */
    public static CMatrix getInstanceFromExcelCSV(String path, char seperator, int headerline) {
        return new CMatrix(FactoryUtils.readCSV(path, seperator, headerline));
    }

    /**
     * generate a matrix from arff file format of Weka
     *
     * @param path : ARFF file path as String object
     * @return CMatrix double type
     */
    public static CMatrix fromARFF(String path) {
        try {
            Instances data = ConverterUtils.DataSource.read(path);
            data.setClassIndex(data.numAttributes() - 1);
            return CMatrix.fromInstances(data);
        } catch (Exception ex) {
            Logger.getLogger(CMatrix.class.getName()).log(Level.SEVERE, null, ex);
        }
        return CMatrix.getInstance();
    }

    /**
     * generate a matrix by reading arff file format of Weka
     *
     * @param path : ARFF file path as String object
     * @return CMatrix double type
     */
    public CMatrix readARFF(String path) {
        try {
            this.wekaInstance = ConverterUtils.DataSource.read(path);
            this.wekaInstance.setClassIndex(this.wekaInstance.numAttributes() - 1);
            return CMatrix.fromInstances(this.wekaInstance);
        } catch (Exception ex) {
            Logger.getLogger(CMatrix.class.getName()).log(Level.SEVERE, null, ex);
        }
        return CMatrix.getInstance();
    }

    /**
     * generate a matrix by reading csv file format and holds column names as
     * feature names and classLabels
     *
     * @param path : csv file path
     * @return CMatrix double type
     */
    public CMatrix readCSV(String path) {
        CMatrix ret = this.clone(this);

        ReaderCSV csv = FactoryUtils.readFromCSVFile(path);
        ret.array = csv.data;
        ret.columnNames = csv.columnNames;
        ret.classLabels = csv.classLabels;
        ret.image = FactoryImageProcess.pixelsToImageGray(ret.array);

        return ret;
    }

    public String[][] readArffAsStringArray(String path) {
        try {
            this.wekaInstance = ConverterUtils.DataSource.read(path);
        } catch (Exception ex) {
            Logger.getLogger(CMatrix.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.wekaInstance.setClassIndex(this.wekaInstance.numAttributes() - 1);
        return FactoryUtils.readArffString(path, this.wekaInstance.numAttributes() - 1);
    }

    public String[][] readArffAsStringArray(String path, int classIndex) {
        return FactoryUtils.readArffString(path, classIndex);
    }

    /**
     * generate a matrix by loading the values read from image
     *
     * @param bf : BufferedImage
     * @return CMatrix
     */
    public CMatrix imload(BufferedImage bf) {
//        return new CMatrix(ImageProcess.imageToPixels255Int(GrayScale.luminosity(bf)));
        return new CMatrix(FactoryImageProcess.imageToPixelsInt(bf));
    }

    /**
     * generate a matrix by loading the values read from image
     *
     * @param bf : BufferedImage
     * @return CMatrix
     */
    public CMatrix loadImage(BufferedImage bf) {
        return imload(bf);
    }

    /**
     * make a deep copy of the current matrix
     *
     * @return CMatrix
     */
    public CMatrix clonePure() {
        CMatrix ret = new CMatrix(FactoryMatrix.clone(this.array));
//        returnedValue.rgbImageArray = FactoryUtils.clone(this.rgbImageArray);
//        returnedValue.image = ImageProcess.clone(this.image);
        ret.image = FactoryImageProcess.pixelsToImageGray(this.array);
        ret.name = this.name;
        ret.prevMatrix = this;
        ret.hold_on = this.hold_on;
        ret.framePlot = this.framePlot;
        return ret;
    }

    /**
     * make a deep copy of the given matrix
     *
     * @param cm
     * @return CMatrix
     */
    public CMatrix clone(CMatrix cm) {
        CMatrix ret = new CMatrix(FactoryMatrix.clone(this.array));
//        returnedValue.rgbImageArray = FactoryUtils.clone(this.rgbImageArray);
//        if (this.image == null) {
//            returnedValue.image = ImageProcess.pixelsToBufferedImage255(this.array);
//        } else {
//            returnedValue.image = ImageProcess.clone(image);
//        }
        if (this.image != null) {
            ret.image = FactoryImageProcess.clone(image);
            //ret.image = ImageProcess.pixelsToBufferedImage255(this.array);
        } else {
//            ret.image = ImageProcess.pixelsToImageGray(ret.array);
        }

        ret.name = this.name;
        ret.prevMatrix = cm;
        cm.nextMatrix = ret;
        ret.hold_on = cm.hold_on;
        ret.framePlot = cm.framePlot;
        ret.wekaInstance = this.wekaInstance;
        ret.columnNames = FactoryUtils.clone(this.columnNames);
        ret.classLabels = FactoryUtils.clone(this.classLabels);
        return ret;
    }

    private CMatrix() {
        this.array = new double[1][1];
        this.returnedValue = new CReturn();
    }

    private CMatrix(int n) {
        n = Math.abs(n);
        this.array = new double[n][n];
        this.returnedValue = new CReturn();
    }

    private CMatrix(double m) {
        int n = (int) Math.abs(Math.round(m));
        this.array = new double[n][n];
        this.returnedValue = new CReturn();
    }

    private CMatrix(int r, int c) {
        r = Math.abs(r);
        c = Math.abs(c);
        this.array = new double[r][c];
        this.returnedValue = new CReturn();
    }

    private CMatrix(int[][] d) {
        this.array = FactoryUtils.toDoubleArray2D(FactoryMatrix.clone(d));
        this.returnedValue = new CReturn();
    }

    private CMatrix(byte[][] d) {
        this.array = FactoryUtils.toDoubleArray2D(FactoryMatrix.clone(d));
        this.returnedValue = new CReturn();
    }

    private CMatrix(double[][] d) {
        this.array = FactoryMatrix.clone(d);
        this.returnedValue = new CReturn();
    }

    private CMatrix(float[][] d) {
        this.array = FactoryUtils.toDoubleArray2D(FactoryMatrix.clone(d));
        this.returnedValue = new CReturn();
    }

    private CMatrix(double[] d) {
        double[][] m = new double[1][d.length];
        m[0] = d;
        this.array = FactoryUtils.transpose(m);
        this.returnedValue = new CReturn();
    }

    private CMatrix(Object[] d) {
        double[][] m = new double[1][d.length];
        for (int i = 0; i < d.length; i++) {
            m[0][i] = Double.parseDouble(d[i] + "");
        }
        this.array = FactoryUtils.transpose(m);
        this.returnedValue = new CReturn();
    }

    private CMatrix(float[] d) {
        float[][] m = new float[1][d.length];
        m[0] = d;
        this.array = FactoryUtils.toDoubleArray2D(FactoryUtils.transpose(m));
        this.returnedValue = new CReturn();
    }

    private CMatrix(int[] d) {
        double[][] m = new double[1][d.length];
        m[0] = FactoryUtils.toDoubleArray1D(d);
        this.array = FactoryUtils.transpose(m);
        this.returnedValue = new CReturn();
    }
    
    

    private CMatrix(byte[] d) {
        double[][] m = new double[1][d.length];
        m[0] = FactoryUtils.toDoubleArray1D(d);
        this.array = FactoryUtils.transpose(m);
        this.returnedValue = new CReturn();
    }

    private CMatrix(BufferedImage img) {
        this.image = img;
        this.array = FactoryUtils.toDoubleArray2D(FactoryImageProcess.imageToPixelsInt(img));
        this.returnedValue = new CReturn();
    }
//
//    public double[][] get2DArrayDouble() {
//        return array;
//    }
//
//    public double[][] toDouble() {
//        return array;
//    }
//
//    public float[][] toFloat() {
//        return FactoryUtils.toFloatArray(array);
//    }
//
//    public int[][] toInt() {
//        return FactoryUtils.toIntArray(array);
//    }
//
//    public byte[][] toByte() {
//        return FactoryUtils.toByteArray(array);
//    }
//
//    public short[][] toShort() {
//        return FactoryUtils.toShortArray(array);
//    }
//
//    public long[][] toLong() {
//        return FactoryUtils.toLongArray(array);
//    }

//    public String[][] toStringArray() {
//        return FactoryUtils.toStringArray(array);
//    }
    /**
     * get 1D double array which is identical to Matlab's a(:)
     *
     * @return double[]
     */
    public double[] toDoubleArray1D() {
        return FactoryUtils.toDoubleArray1D(this.array);
    }

    public double[][] toDoubleArray2D() {
        return this.array;
    }

    /**
     * ARGB values
     *
     * @return
     */
    public double[][][] toDoubleArray3D() {
        return FactoryImageProcess.imageToPixelsColorDoubleFaster(image);
    }

    public int[] toIntArray1D() {
        return FactoryUtils.toIntArray1D(this.array);
    }

    public int[][] toIntArray2D() {
        return FactoryUtils.toIntArray2D(this.array);
    }

    public short[] toShortArray1D() {
        return FactoryUtils.toShortArray1D(this.array);
    }

    public short[][] toShortArray2D() {
        return FactoryUtils.toShortArray2D(this.array);
    }

    public float[] toFloatArray1D() {
        return FactoryUtils.toFloatArray1D(this.array);
    }

    public float[][] toFloatArray2D() {
        return FactoryUtils.toFloatArray2D(this.array);
    }

    public long[] toLongArray1D() {
        return FactoryUtils.toLongArray1D(this.array);
    }

    public long[][] toLongArray2D() {
        return FactoryUtils.toLongArray2D(this.array);
    }

    public String[] toStringArray1D() {
        return FactoryUtils.toStringArray1D(this.array);
    }

    public String[][] toStringArray2D() {
        return FactoryUtils.toStringArray2D(this.array);
    }

    /**
     * set the array of current matrix note that clone is not calling so,
     * current matrix structure is changed
     *
     * @param a : double[]
     * @return CMatrix
     */
    public CMatrix setArray(double[] a) {
        double[][] d = new double[a.length][1];
        for (int i = 0; i < a.length; i++) {
            d[i][0] = a[i];
        }
        this.array = d;
        return this;
    }

    /**
     * set the array of current matrix note that clone is not calling so,
     * current matrix structure is changed
     *
     * @param a : double[]
     * @param r
     * @param c
     * @return CMatrix
     */
    public CMatrix setArray(double[] a, int r, int c) {
        double[][] d = new double[r][c];
        int k = 0;
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                d[i][j] = a[k++];
            }
        }
        this.array = d;
        return this;
    }

    /**
     * set the array of current matrix note that clone is not calling anymore,
     * current matrix structure will be changed
     *
     * @param a : int[]
     * @return CMatrix
     */
    public CMatrix setArray(int[] a) {
        if (a.length == 0) {
            return new CMatrix();
        }
        double[][] d = new double[a.length][1];
        for (int i = 0; i < a.length; i++) {
            d[i][0] = a[i];
        }
        this.array = d;
        return this;
    }

    /**
     * set the array of current matrix note that clone is not calling anymore,
     * current matrix structure will be changed
     *
     * @param a : int[][]
     * @return CMatrix
     */
    public CMatrix setArray(int[][] a) {
        if (a.length == 0) {
            return new CMatrix();
        }
        int r = a.length;
        int c = a[0].length;
        double[][] d = new double[r][c];
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                d[i][j] = a[i][j];
            }
        }
        this.array = d;
        return this;
    }

    /**
     * set the array of current matrix note that clone is not calling anymore,
     * current matrix structure will be changed
     *
     * @param array : double[]
     * @return CMatrix
     */
    public CMatrix setArray(double[][] array) {
        this.array = array;
        return this;
    }

    /**
     * Try to update the value of the matrix which is specified by 1D index
     * array Note that this method can be used after calling the find method
     * which also produces the 1D column vector
     *
     *
     * @param indexes:results of find method or specific 1D index array that we
     * want to changed
     * @param val: value that we want to set it
     * @return updated CMatrix
     */
    public CMatrix setValue(int[] indexes, double val) {
        CMatrix ret = this.clone(this);

        double[] d = ret.toDoubleArray1D();
        for (int i = 0; i < indexes.length; i++) {
            d[indexes[i]] = val;
        }
        double[][] a = FactoryUtils.reshape(d, getRowNumber(), getColumnNumber());
        ret.setArray(a);
        return ret;
    }

    /**
     * change the value of the matrix at specified row and column
     *
     * @param cp
     * @param val
     * @return
     */
    public CMatrix setValue(CPoint cp, double val) {
        if (cp.row > this.getRowNumber() || cp.row < 0 || cp.column < 0 || cp.column > this.getColumnNumber()) {
            return this;
        }
        array[cp.row][cp.column] = val;
        return this;
    }

    /**
     * Try to update the value of the matrix which is specified by 1D index
     * array Note that this method can be used after calling the find method
     * which also produces the 1D column vector
     *
     *
     * @param indexes:results of find method or specific 1D index array that we
     * want to changed
     * @param val: value that we want to set it
     * @return updated CMatrix
     */
    public CMatrix setValue(double[] indexes, double val) {
        CMatrix ret = this.clone(this);

        double[] d = ret.toDoubleArray1D();
        for (int i = 0; i < indexes.length; i++) {
            d[(int) indexes[i]] = val;
        }
        double[][] a = FactoryUtils.reshape(d, getRowNumber(), getColumnNumber());
        ret.setArray(a);
        return ret;
    }

    /**
     * column wised reshaping operation
     *
     * @param r
     * @param c
     * @return
     */
    public CMatrix reshape(int r, int c) {
        CMatrix ret = this.clone(this);

//        if (returnedValue.getColumnNumber() * returnedValue.getRowNumber() != r * c) {
//            FactoryUtils.showMessage("size mismatch please provide correct dimensions");
//            return returnedValue;
//        }        
        double[][] rs = FactoryUtils.reshape(ret.array, r, c);
        ret.setArray(rs);
        return ret;
    }

    public CMatrix setRowColumn(int i, int j, double p) {
        CMatrix ret = this.clone(this);

        ret.array[i][j] = p;
        return ret;
    }

    public CPoint getRowColumn(int index) {
        CPoint p = new CPoint(0, 0);
        if (index < 0 || index > this.getRowNumber() * this.getColumnNumber()) {
            return p;
        } else {
            int col = index / this.getRowNumber();
            int row = index - col * this.getRowNumber();
            p.column = col;
            p.row = row;
        }
        return p;
    }

    public CPoint getRowColumn(double index) {
        CPoint p = new CPoint(0, 0);
        if (index < 0 || index > this.getRowNumber() * this.getColumnNumber()) {
            return p;
        } else {
            int col = (int) index / this.getRowNumber();
            int row = (int) index - col * this.getRowNumber();
            p.column = col;
            p.row = row;
        }
        return p;
    }

    /**
     * executes as Matlab command of a=1:10;
     *
     * Matlab de a=1:10 denildiğinde nasıl ki 1 den 10 a kadar artan sayılardan
     * bir row matrisi yapar vector de bu işe yarar.
     *
     * @param from :double
     * @param to :double
     * @return CMatrix
     */
    public CMatrix vector(double from, double to) {
        CMatrix ret = this.clone(this);

        if (from > to) {
            throw new UnsupportedOperationException("from should be smaller than to, other wise use other constructor");
        }
        int n = (int) (Math.abs(to - from) + 1);
        ret.array = new double[1][n];
        for (int i = 0; i < n; i++) {
            ret.array[0][i] = from + i;
        }
        ret.name = this.name + "|vector";
        return ret.transpose();
    }

    /**
     * matlab deki gibi başlangıçtan sona kadar incr artarak bir row matris
     * yapar
     *
     * @param from
     * @param incr
     * @param to
     * @return CMatrix
     */
    public CMatrix vector(double from, double incr, double to) {
        CMatrix ret = this.clone(this);

        if (from < to && incr < 0) {
            throw new UnsupportedOperationException("incr should be positive");
        }
        if (from > to && incr > 0) {
            throw new UnsupportedOperationException("incr should be negative");
        }
        double delta = Math.abs(to - from);
        int n = (int) (delta / incr);
        ret.array = new double[1][n];
        for (int i = 0; i < n; i++) {
            ret.array[0][i] = from + i * incr;
        }
        ret.name = this.name + "|vector";
        return ret.transpose();
    }

    public CMatrix linspace(double from, double to, int n) {
        CMatrix ret = this.clone(this);

        if (n < 0) {
            throw new UnsupportedOperationException("n should be positive");
        }
        double delta = to - from;
        double incr = delta / n;
        ret.array = new double[1][n];
        for (int i = 0; i < n; i++) {
            ret.array[0][i] = from + i * incr;
        }
        ret.name = this.name + "|linspace";
        return ret.transpose();
    }

    /**
     * Matlab de a=1:10 denildiğinde nasıl ki 1 den 10 a kadar artan sayılardan
     * bir row matrisi yapar vector de bu işe yarar.
     *
     * @param from
     * @param to
     * @return
     */
    public CMatrix vector(int from, int to) {
        CMatrix ret = this.clone(this);

        if (from > to) {
            throw new UnsupportedOperationException("'from' should be smaller than 'to' other wise use another constructor");
        }
        int n = (int) (Math.abs(to - from) + 1);
        ret.array = new double[1][n];
        for (int i = 0; i < n; i++) {
            ret.array[0][i] = from + i;
        }
        ret.name = this.name + "|vector";
        return ret.transpose();
    }

    /**
     *
     * @param from
     * @param to
     * @param nrows
     * @return
     */
    public CMatrix vector2D(int from, int to, int nrows) {
        CMatrix ret = this.clone(this);

        if (from > to) {
            throw new UnsupportedOperationException("'from' should be smaller than 'to' other wise use another constructor");
        }
        int n = (int) (Math.abs(to - from) + 1);
        ret.array = new double[nrows][n];
        for (int i = 0; i < nrows; i++) {
            for (int j = 0; j < n; j++) {
                ret.array[i][j] = from + j;
            }
        }
        ret.name = this.name + "|vector2d";
        return ret;
    }

    public CMatrix vector2D(int from, int to, int nrows, int ncols) {
        CMatrix ret = this.clone(this);

        int n = ncols;
        double incr = (Math.abs(to - from) + 1.0) / ncols;
        ret.array = new double[nrows][n];
        double t = from;
        for (int i = 0; i < nrows; i++) {
            for (int j = 0; j < n; j++) {
                t += incr;
                ret.array[i][j] = t;
            }
            t = from;
        }
        ret.name = this.name + "|vector2d";
        return ret;
    }

    /**
     *
     * @param from
     * @param to
     * @param nrows
     * @return
     */
    public CMatrix imgradient(int from, int to, int nrows) {
        CMatrix ret = this.clone(this);

        ret = vector2D(from, to, nrows);
        return ret;
    }

    /**
     *
     * @param from
     * @param to
     * @param nrows
     * @param ncols
     * @return
     */
    public CMatrix imgradient(int from, int to, int nrows, int ncols) {
        CMatrix ret = this.clone(this);

        ret = vector2D(from, to, nrows, ncols);
        return ret;
    }

    /**
     * matlab deki gibi başlangıçtan sona kadar incr artarak bir row matris
     * yapar
     *
     * @param from
     * @param incr
     * @param to
     * @return
     */
    public CMatrix vector(int from, double incr, int to) {
        CMatrix ret = this.clone(this);

        if (from < to && incr < 0) {
            throw new UnsupportedOperationException("incr should be positive");
        }
        if (from > to && incr > 0) {
            throw new UnsupportedOperationException("incr should be negative");
        }
        double delta = Math.abs(to - from);
        int n = (int) (delta / incr);
        ret.array = new double[1][n + 1];
        for (int i = 0; i <= n; i++) {
            ret.array[0][i] = from + i * incr;
        }
        ret.name = this.name + "|vector";
        return ret.transpose();
    }

    /**
     *
     * @param from
     * @param to
     * @param n
     * @return
     */
    public CMatrix linspace(int from, int to, int n) {
        CMatrix ret = this.clone(this);

        if (n < 0) {
            throw new UnsupportedOperationException("n should be positive");
        }
        double delta = to - from;
        double incr = delta / (n - 1);
        ret.array = new double[1][n];
        for (int i = 0; i < n; i++) {
            ret.array[0][i] = from + i * incr;
        }
        ret.name = this.name + "|linspace";
        return ret.transpose();
    }

    public CMatrix zeros(int n) {
        CMatrix ret = new CMatrix(n);
        ret.fillMatrix(0);
        ret.name = this.name + "|zeros";
        return ret.clone(this);
    }

    /**
     * generate a nr x nc-size matrix with a fixed value n
     *
     * @param nr
     * @param nc
     * @param n
     * @return
     */
    public CMatrix numbers(int nr, int nc, int n) {
        CMatrix ret = new CMatrix(nr, nc);
        ret.fillMatrix(n);
        ret.name = this.name + "|numbers";
        return ret.clone(this);
    }

    /**
     *
     * @param r
     * @param c
     * @return
     */
    public CMatrix zeros(int r, int c) {
        CMatrix ret = new CMatrix(r, c);
//        ret.fillMatrix(0);
        ret.name = this.name + "|zeros";
        return ret.clone(this);
    }

    /**
     *
     * @param n
     * @return
     */
    public CMatrix ones(int n) {
        CMatrix ret = new CMatrix(n);
        ret.fillMatrix(1);
        ret.name = this.name + "|ones";
        return ret.clone(this);
    }

    /**
     *
     * @param r
     * @param c
     * @return
     */
    public CMatrix ones(int r, int c) {
        CMatrix ret = new CMatrix(r, c);
        ret.fillMatrix(1);
        ret.name = this.name + "|ones";
        return ret.clone(this);
    }

    /**
     *
     * @param n
     * @return
     */
    public CMatrix rand(int n) {
        CMatrix ret = new CMatrix(n);
        ret.setArray(FactoryMatrix.fillRandMatrix(ret.array, random));
        ret.name = this.name + "|rand";
        return ret.clone(this);
    }

    public CMatrix rand(int r, int c) {
        CMatrix ret = new CMatrix(r, c);
        ret.setArray(FactoryMatrix.fillRandMatrix(ret.array, random));
        ret.name = this.name + "|rand";
        return ret.clone(this);
    }

    public CMatrix rand(int r, int c, Random rnd) {
        CMatrix ret = new CMatrix(r, c);
        ret.setArray(FactoryMatrix.fillRandMatrix(ret.array, rnd));
        ret.name = this.name + "|rand";
        return ret.clone(this);
    }

    public CMatrix rand(int r, int c, int max) {
        CMatrix ret = new CMatrix(r, c);
        ret.setArray(FactoryMatrix.fillRandMatrix(ret.array, max, random));
        ret.name = this.name + "|rand";
        return ret.clone(this);
    }

    public CMatrix rand(int r, int c, double max) {
        CMatrix ret = new CMatrix(r, c);
        ret.setArray(FactoryMatrix.fillRandMatrix(ret.array, max, random));
        ret.name = this.name + "|rand";
        return ret.clone(this);
    }

    public CMatrix rand(int r, int c, int min, int max) {
        CMatrix ret = new CMatrix(r, c);
        ret.setArray(FactoryMatrix.fillRandMatrix(ret.array, min, max, random));
        ret.name = this.name + "|rand";
        return ret.clone(this);
    }

    public CMatrix rand(int r, int c, double min, double max) {
        CMatrix ret = new CMatrix(r, c);
        ret.setArray(FactoryMatrix.fillRandMatrix(ret.array, min, max, random));
        ret.name = this.name + "|rand";
        return ret.clone(this);
    }

    /**
     * Generates nxn square matrix with normal distribution
     *
     * @param n
     * @return
     */
    public CMatrix randn(int n) {
        CMatrix ret = new CMatrix(n);
        ret.setArray(FactoryMatrix.fillRandNormalMatrix(ret.array, random));
        ret.name = this.name + "|randn";
        return ret.clone(this);
    }

    /**
     * Generates rxc matrix with normal distribution
     *
     * @param r
     * @param c
     * @return
     */
    public CMatrix randn(int r, int c) {
        CMatrix ret = new CMatrix(r, c);
        ret.setArray(FactoryMatrix.fillRandNormalMatrix(ret.array, ret.random));
        ret.name = this.name + "|randn";
        return ret.clone(this);
    }

    /**
     * Generates rxc matrix with normal distribution within max upper bound
     *
     * @param r
     * @param c
     * @param max
     * @return
     */
    public CMatrix randn(int r, int c, int max) {
        CMatrix ret = new CMatrix(r, c);
        ret.setArray(FactoryMatrix.fillRandNormalMatrix(ret.array, max, random));
        ret.name = this.name + "|randn";
        return ret.clone(this);
    }

    /**
     * Generates rxc matrix with normal distribution within max upper bound
     *
     * @param r
     * @param c
     * @param max
     * @return
     */
    public CMatrix randn(int r, int c, double max) {
        CMatrix ret = new CMatrix(r, c);
        ret.setArray(FactoryMatrix.fillRandNormalMatrix(ret.array, max, random));
        ret.name = this.name + "|randn";
        return ret.clone(this);
    }

    /**
     * Generates rxc matrix with normal distribution within [min...max] bounds
     *
     * @param r
     * @param c
     * @param min
     * @param max
     * @return
     */
    public CMatrix randn(int r, int c, int min, int max) {
        CMatrix ret = new CMatrix(r, c);
        ret.setArray(FactoryMatrix.fillRandNormalMatrix(ret.array, min, max, random));
        ret.name = this.name + "|randn";
        return ret.clone(this);
    }

    /**
     * Generates rxc matrix with normal distribution within [min...max] bounds
     *
     * @param r
     * @param c
     * @param min
     * @param max
     * @return
     */
    public CMatrix randn(int r, int c, double min, double max) {
        CMatrix ret = new CMatrix(r, c);
        ret.setArray(FactoryMatrix.fillRandNormalMatrix(ret.array, min, max, random));
        ret.name = this.name + "|randn";
        return ret.clone(this);
    }

    /**
     * With a given mean and variance generates rxc matrix with normal
     * distribution return variance*x+mean
     *
     * @param r
     * @param c
     * @param mean
     * @param var
     * @return
     */
    public CMatrix randnMeanVariance(int r, int c, double mean, double var) {
        CMatrix ret = new CMatrix(r, c);
        ret.setArray(FactoryMatrix.fillRandNormalMatrixMeanVar(ret.array, mean, var, random));
        ret.name = this.name + "|randn";
        return ret.clone(this);
    }

    /**
     * Plot scatter graph of the first two column vectors of the CMatrix Another
     * usage is an overloaded scatter method which takes two vector as an input
     * parameter or two CMatrix objects.
     *
     *
     *
     * @return CMatrix
     */
    public CMatrix scatter() {
        FrameScatterPlot frm = new FrameScatterPlot(this);
        frm.setVisible(true);
        return this;
    }

    /**
     * Plot scatter graph of two vector (double[] array) as an input parameter.
     *
     * Notification: two vectors should be the same size
     * @param x
     * @param y
     *
     * @return CMatrix
     */
    public CMatrix scatter(double[] x, double[] y) {
        if (x.length != y.length) {
            System.err.println("Array dimension mismatched.");
        }
        int n = Math.min(x.length, y.length);
        double[][] d = FactoryMatrix.catHorizontalMatrix(x, y);
        FrameScatterPlot frm = new FrameScatterPlot(CMatrix.getInstance(d));
        frm.setVisible(true);
        return this;
    }

    /**
     * used as Matlab scatter function with figure attribute values
     *
     * @param attr : figure attribute values
     * @return CMatrix
     */
    public CMatrix scatter(TFigureAttribute attr) {
        FrameScatterPlot frm = new FrameScatterPlot(this, attr);
        frm.setVisible(true);
        return this;
    }

    /**
     * Matlab compatible command: plot the curves of each column in the matrix
     *
     * @return CMatrix
     */
    public CMatrix plot() {
        if (!hold_on) {
            framePlot = new FramePlot(this);
        } else {
            if (framePlot == null) {
                framePlot = new FramePlot(this);
            }
            framePlot.setMatrix(this);
        }
        TFigureAttribute fg = new TFigureAttribute();
        fg.pointType = plotType;
        framePlot.setFigureAttribute(fg);
        framePlot.setVisible(true);
        return this;
    }

    /**
     * plot the curves of each column in the matrix
     * 
     * @param frm
     *
     * @return CMatrix
     */
    public CMatrix plotRefresh(FramePlot frm) {
        frm.setMatrix(this);
        frm.setVisible(true);
        return this;
    }

    /**
     * By using single plot frame, this command try to redraw updated matrix
     * it is useful if you make animation or moving simulation within the loop
     *
     * @return CMatrix
     */
    public CMatrix plotRefresh() {
        if (framePlot == null) {
            framePlot = new FramePlot(this);
            framePlot.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        }
        framePlot.setMatrix(this);
        framePlot.setVisible(true);
        return this;
    }
    
    /**
     * By using single plot frame, this command try to redraw updated matrix
     * it is useful if you make animation or moving simulation within the loop
     *
     * @return CMatrix
     */
    public CMatrix plotOn() {
        if (framePlot == null) {
            framePlot = new FramePlot(this);
            framePlot.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        }
        framePlot.setMatrix(this);
        framePlot.setVisible(true);
        return this;
    }

    /**
     * plot the curves of each column in the matrix
     *
     * @return CMatrix
     */
    public CMatrix bar() {
        FrameBar frm = new FrameBar(this);
        frm.setVisible(true);
        return this;
    }

    /**
     * plot the curves based on provided x axis values
     *
     * @param x:value of x axis
     * @return
     */
    public CMatrix plot(double[] x) {
        FramePlot frm = new FramePlot(this, x);
        frm.setVisible(true);
        return this;
    }

    public CMatrix plot(TFigureAttribute attr) {
        FramePlot frm = new FramePlot(this, attr);
        frm.setVisible(true);
        return this;
    }

    public CMatrix plot(TFigureAttribute attr, double[] x) {
        FramePlot frm = new FramePlot(this, attr, x);
        frm.setVisible(true);
        return this;
    }

    public CMatrix setPlotType(String pointType) {
        this.plotType = pointType;
        return this;
    }

    public CMatrix plot(String title) {
        FramePlot frm = new FramePlot(this);
        frm.setPlotType(this.plotType);
        frm.setVisible(true);
        frm.setTitle(title);
        return this;
    }

    /**
     * Matlab compatible command: show image in the frame
     *
     *
     * Matlabdakine benzer şekilde temel resim gösteren figure açar default
     * olarak imgenin orjinali nasılsa onu gösterir gri ise gri rgb ise rgb
     * değişiklik yapmaz. Eğer gri göstrmek istiyorsanız imshowGray komutunu,
     * diğer taraftan renkli göstermek için de imshowRGB yi kullanınız.
     *
     * @return
     */
    public CMatrix imshow() {
        if (image == null || image.getType() == BufferedImage.TYPE_BYTE_GRAY) {
            image = FactoryImageProcess.pixelsToImageGray(array);
        }
        FrameImage frm = new FrameImage(image, this.imagePath);
        frm.setVisible(true);
        return this;
    }

    /**
     *
     * show on single frame for each call only one frame is maintained
     *
     * @param title:caption of the frame
     * @return
     */
    public CMatrix imshowRefresh(String title) {
        if (image == null || image.getType() == BufferedImage.TYPE_BYTE_GRAY) {
            image = FactoryImageProcess.pixelsToImageGray(array);
        }
        if (frameImage == null) {
            frameImage = new FrameImage();
            frameImage.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        }
        frameImage.setImage(image);
        frameImage.setTitle(title);
        frameImage.setVisible(true);
        return this;
    }

    /**
     *
     * show on single frame for each call only one frame is maintained
     *
     * @return
     */
    public CMatrix imshowRefresh() {
        return imshowRefresh("");
    }

    /**
     *
     * show on single frame for each call only one frame is maintained
     *
     * @return
     */
    public CMatrix imRefresh() {
        if (image == null || image.getType() == BufferedImage.TYPE_BYTE_GRAY) {
            image = FactoryImageProcess.pixelsToImageGray(array);
        }
        return this;
    }

    /**
     * Traditional imshow reopens a new Figure foreach call. If we want to
     * utilize single Frame we should pass object as a parameter to the
     * overloaded imshow method
     *
     * @param frm
     * @return
     */
    public CMatrix imshow(FrameImage frm) {
//        image = ImageProcess.pixelsToBufferedImageGray(array);
        frm.setImage(image);
        frm.setVisible(true);
        return this;
    }

//    /**
//     * Traditional imshow reopens a new Figure foreach call. If we want to
//     * utilize single Frame we should pass object as a parameter to the
//     * overloaded imshow method
//     *
//     * @param frm
//     * @return
//     */
//    public CMatrix imshow(FrameImage frm, boolean force) {
//        if (force) {
//            
//        }
//        image = ImageProcess.pixelsToBufferedImage255(array);
//        frm.setImage(image);
//        frm.setVisible(true);
//        return this;
//    }
    /**
     * Traditional imshow reopens a new Figure foreach call. If we want to
     * utilize single Frame we should pass object as a parameter to the
     * overloaded imshow method
     *
     * @param frm
     * @param title
     * @return
     */
    public CMatrix imshow(FrameImage frm, String title) {
        if (image == null || image.getType() == BufferedImage.TYPE_BYTE_GRAY) {
            image = FactoryImageProcess.pixelsToImageGray(array);
        }
        frm.setImage(image);
        frm.setVisible(true);
        return this;
    }

    /**
     * opens a figure and show the image on that figure refresh tries to build
     * image from the matrix
     *
     * @return
     */
//    public CMatrix imshow(boolean refresh) {
//        imshowRGB(refresh);
//        return this;
//    }
    /**
     * opens the figure with image
     *
     * @param title: caption of the figure
     * @return
     */
    public CMatrix imshow(String title) {
        if (image == null || image.getType() == BufferedImage.TYPE_BYTE_GRAY) {
            image = FactoryImageProcess.pixelsToImageGray(array);
        }
        FrameImage frm = new FrameImage(image, title);
        frm.setVisible(true);
        return this;
    }

//    /**
//     * Detaylı ve gelişmiş resim gösteren figure açar
//     *
//     * @return
//     */
//    public CMatrix imshowAdvanced() {
//        if (image == null || image.getType() == BufferedImage.TYPE_BYTE_GRAY) {
//            image = ImageProcess.pixelsToBufferedImage255(array);
//        }
//        FrameImageAdvanced frm = new FrameImageAdvanced(image, imagePath);
//        frm.setVisible(true);
//        return this;
//    }
//    /**
//     * Detaylı ve gelişmiş resim gösteren figure açar
//     *
//     * @param title:caption of the figure
//     * @return
//     */
//    public CMatrix imshowAdvanced(String title) {
//        if (image == null || image.getType() == BufferedImage.TYPE_BYTE<_GRAY) {
//            image = ImageProcess.pixelsToBufferedImage255(array);
//        }
//        FrameImageAdvanced frm = new FrameImageAdvanced(image, title);
//        frm.setVisible(true);
//        return this;
//    }
//    public CMatrix imshowGray() {
////        if (image == null) {
////            image = ImageProcess.pixelsToBufferedImage255(FactoryUtils.toIntArray(array));
////        }
//        image = ImageProcess.pixelsToBufferedImage255(array);
////        FrameImage frm = new FrameImage(ImageProcess.pixelsToBufferedImage255(ImageProcess.imageToPixels255(image)), this.imagePath);
//        FrameImage frm = new FrameImage(image, this.imagePath);
//        frm.setVisible(true);
//        return this;
//    }
    
    /**
     *
     * @return
     */
    public CMatrix toGrayLevel() {
        CMatrix ret = this.clone(this);

//        returnedValue.image=GrayScale.luminosity(returnedValue.image);
//        returnedValue.image = ImageProcess.pixelsToBufferedImage255(returnedValue.array);
        if (ret.image == null) {
            ret.image = FactoryImageProcess.pixelsToImageGray(FactoryUtils.toIntArray2D(ret.array));
        }
        ret.image = FactoryImageProcess.toGrayLevel(ret.image);
        ret.array = FactoryImageProcess.imageToPixelsDouble(ret.image);
//        if (returnedValue.image != null) {
//            returnedValue.image = ImageProcess.toGrayLevel(returnedValue.image);
//        }
//        returnedValue.array = FactoryUtils.toDoubleArray(ImageProcess.imageToPixels255(returnedValue.image));
        return ret;
    }

    /**
     * convert RGB color image to the Gray Value. This method is MATLAB
     * compatible
     *
     * @return
     */
    public CMatrix rgb2gray() {
        return toGrayLevel();
    }

    /**
     * convert RGB color image to the Hue Saturation and Value (Note that Value
     * is sometimes called as Brightness value therefore naming HSV as HSB is
     * also correct convention) this methos is MATLAB compatible
     *
     * @return
     */
    public CMatrix rgb2hsv() {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.rgb2hsv(ret.image);
        return ret;
    }

    public CMatrix hsv2rgb() {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.hsv2rgb(ret.image);
        return ret;
    }

//    public CMatrix toHSV() {
//        CMatrix ret = this.clone(this); lastCM=ret; 
//        ret.image = ImageProcess.toHSVColorSpace(ret.image);
//        return ret;
//    }
    public CMatrix getHueChannel() {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.getHueChannel(ret.image);
        ret.array = FactoryImageProcess.imageToPixelsDouble(ret.image);
        return ret;
    }

    public CMatrix getSaturationChannel() {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.getSaturationChannel(ret.image);
        ret.array = FactoryImageProcess.imageToPixelsDouble(ret.image);
        return ret;
    }

    public CMatrix getValueChannel() {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.getValueChannel(ret.image);
        ret.array = FactoryImageProcess.imageToPixelsDouble(ret.image);
        return ret;
    }

    /**
     * Matlabdakine benzer şekilde temel resim gösteren figure açar
     *
     * @return
     */
    public CMatrix showImage() {
        return CMatrix.this.imshow();
    }

    /**
     * Matlabdakine benzer şekilde temel resim gösteren figure açar
     *
     * @param title
     * @return
     */
    public CMatrix showImage(String title) {
        return CMatrix.this.imshow(title);
    }

//    /**
//     * Detaylı ve gelişmiş resim gösteren figure açar
//     *
//     * @return
//     */
//    public CMatrix showImageAdvanced() {
//        return imshowAdvanced();
//    }
//    /**
//     * Detaylı ve gelişmiş resim gösteren figure açar
//     *
//     * @param title:caption of the figure
//     * @return
//     */
//    public CMatrix showImageAdvanced(String title) {
//        return imshowAdvanced(title);
//    }
//    public CMatrix imshowRGB() {
//        image = ImageProcess.pixelsToBufferedImage255(FactoryUtils.toIntArray(array));
//        FrameImage frm = new FrameImage(image, this.imagePath);
//        frm.setVisible(true);
//        return this;
//    }
//    public CMatrix imshowRGB(boolean refresh) {
//        if (image == null || refresh) {
//            image = ImageProcess.pixelsToBufferedImage255(FactoryUtils.toIntArray(array));
//        }
//        FrameImage frm = new FrameImage(image, this.imagePath);
//        frm.setVisible(true);
//        return this;
//    }
//    public CMatrix showRGBImage() {
//        return imshowRGB();
//    }
    /**
     * Matlab compatible command: show image histogram
     *
     * is used for only images for matrix you should use hist instead
     *
     * @return original CMatrix
     */
    public CMatrix imhist() {
        return imhist("");
    }

    public CMatrix imhist(String title) {
        CMatrix ret = this.clone(this);

        if (ret.image == null || ret.image.getType() == BufferedImage.TYPE_BYTE_GRAY) {
            ret.image = FactoryImageProcess.pixelsToImageGray(array);
        }
        CMatrix cc = FactoryImageProcess.getHistogram(ret);
        FrameImageHistogram frm = new FrameImageHistogram(cc);
        frm.setTitle(title);
        frm.setVisible(true);
        return this;
    }

    /**
     * is used for revert or invert the image color
     *
     * @return
     */
    public CMatrix imcomplement() {
        CMatrix ret = this.clone(this);

        ret = ret.rgb2gray();
        BufferedImage bf = FactoryImageProcess.revert(ret.image);
        ret.setImage(bf);
        return ret;
    }

    /**
     * is used for revert or invert the image color
     *
     * @return
     */
    public CMatrix imnegative() {
        return imcomplement();
    }

    /**
     * hist by default calculates 256 bin for a given column matrix
     *
     * @return histogram of each column
     */
    public CMatrix hist() {
        CMatrix ret = this.clone(this);

        ret.array = FactoryUtils.hist(ret.array);
        ret.bar();
        return this;
    }

    /**
     * Matlab compatible code: calculate the histogram of the matrix for a
     * specified number of bins as column wised
     *
     * @param nBins
     * @return histogram of each column
     */
    public CMatrix hist(int nBins) {
        CMatrix ret = this.clone(this);

        if (ret.getRowNumber() == 1 && ret.getColumnNumber() == 1) {
            return ret;
        } else if (ret.getRowNumber() == 1 && ret.getColumnNumber() > 1) {
            ret = ret.transpose();
        }
        ret.array = FactoryUtils.hist(ret.array, nBins);
        FrameHistogram frm = new FrameHistogram(this.clone(this), ret);
        frm.setVisible(true);
        return this;
    }

    /**
     * calculate the histogram of the matrix for a specified number of bins as
     * column wised
     *
     * @param nbins
     * @param title
     * @return histogram of each column
     */
    public CMatrix hist(int nBins, String title) {
        CMatrix ret = this.clone(this);

        ret.array = FactoryUtils.hist(ret.array, nBins);
        FrameHistogram frm = new FrameHistogram(this.clone(this), ret, title);
        frm.setVisible(true);
        return this;
    }

    /**
     * calculate the histogram of the matrix for a specified number of bins as
     * column wised
     *
     * @param nBins
     * @param title
     * @param isStatisticsVisible
     * @return histogram of each column
     */
    public CMatrix hist(int nBins, String title, boolean isStatisticsVisible) {
        CMatrix ret = this.clone(this);

        ret.array = FactoryUtils.hist(ret.array, nBins);
        FrameHistogram frm = new FrameHistogram(this.clone(this), ret, title, isStatisticsVisible);
        frm.setVisible(true);
        return this;
    }

    /**
     *
     * @return
     */
    public CMatrix getImageHistogramData() {
        CMatrix ret = this.clone(this);

        return FactoryImageProcess.getHistogram(ret);
    }

    /**
     *
     * @return
     */
    public CMatrix getHistogramData() {
        CMatrix ret = this.clone(this);

        ret.array = FactoryUtils.hist(ret.array);
        return ret;
    }

    public CMatrix getHistogramData(int nBins) {
        CMatrix ret = this.clone(this);

        ret.array = FactoryUtils.hist(ret.array, nBins);
        return ret;
    }

    public CMatrix showHistogram() {
        return imhist();
    }

    /**
     * Probability Density Function (image histogram normalize to 0..1)
     *
     * @return
     */
    public CMatrix pdf() {
        return getPDFData();
    }

    /**
     * Cumulative Density Function
     *
     * @return
     */
    public CMatrix cdf() {
        return getCDFData();
    }

    public CMatrix getPDFData() {
        CMatrix ret = this.clone(this);

        ret = ret.toGrayLevel();
        CMatrix m_hist = FactoryImageProcess.getHistogram(ret);
        double sum = m_hist.sumTotal();
        m_hist = m_hist.divideScalar(sum).clone(m_hist);
        return m_hist.transpose();
    }

    public CMatrix getCDFData() {
        double[] h_pdf = getPDFData().toDoubleArray1D();
        double[] h_cdf = new double[h_pdf.length];
        double t = 0;
        for (int i = 0; i < h_pdf.length; i++) {
            t += h_pdf[i];
            h_cdf[i] = t;
        }
        CMatrix ret = this.clone(this);

        ret.setArray(h_cdf);
        return ret;
//        CMatrix ret = this.clone(this); lastCM=ret; 
//        CMatrix m_hist = ImageProcess.getHistogram(ret);
//        double sum = m_hist.sumTotal();
//        m_hist = m_hist.divideScalar(sum).clone(m_hist);
//        double[] d = m_hist.toDoubleArray1D();
//        double[] r = new double[d.length];
//        for (int i = 0; i < d.length; i++) {
//            r[i] = FactoryUtils.sum(d, i);
//        }
//        m_hist.setArray(r);
//        return m_hist.transpose();
    }

    public CMatrix showPDF() {
        this.pdf().plot();
        return this;
    }

    public CMatrix showCDF() {
        this.cdf().plot();
        return this;
    }

    public CMatrix imhistRed() {
        FrameImageHistogram frm = new FrameImageHistogram(FactoryImageProcess.getHistogramRed(this));
        frm.setVisible(true);
        return this;
    }

    public CMatrix imhistGreen() {
        FrameImageHistogram frm = new FrameImageHistogram(FactoryImageProcess.getHistogramGreen(this));
        frm.setVisible(true);
        return this;
    }

    public CMatrix imhistBlue() {
        FrameImageHistogram frm = new FrameImageHistogram(FactoryImageProcess.getHistogramBlue(this));
        frm.setVisible(true);
        return this;
    }

    public CMatrix imhistGray() {
        return imhist();
    }

    public CMatrix imhistRed(String title) {
        CMatrix ret = this.clone(this);

        FrameImageHistogram frm = new FrameImageHistogram(FactoryImageProcess.getHistogramRed(ret));
        frm.setTitle(title);
        frm.setVisible(true);
        return this;
    }

    public CMatrix imhistGreen(String title) {
        CMatrix ret = this.clone(this);

        FrameImageHistogram frm = new FrameImageHistogram(FactoryImageProcess.getHistogramGreen(ret));
        frm.setTitle(title);
        frm.setVisible(true);
        return this;
    }

    public CMatrix imhistBlue(String title) {
        CMatrix ret = this.clone(this);

        FrameImageHistogram frm = new FrameImageHistogram(FactoryImageProcess.getHistogramBlue(ret));
        frm.setTitle(title);
        frm.setVisible(true);
        return this;
    }

    public CMatrix imhistGray(String title) {
        return imhist(title);
    }

    public CMatrix imhistAlpha() {
        CMatrix ret = this.clone(this);

        FrameImageHistogram frm = new FrameImageHistogram(FactoryImageProcess.getHistogramAlpha(ret));
        frm.setVisible(true);
        return this;
    }

    public CMatrix showHistogramRed() {
        return imhistRed();
    }

    public CMatrix showHistogramGreen() {
        return imhistGreen();
    }

    public CMatrix showHistogramBlue() {
        return imhistBlue();
    }

    public CMatrix showHistogramGray() {
        return imhistGray();
    }

    public CMatrix showHistogramAlpha() {
        return imhistAlpha();
    }

    public CMatrix showDataGrid() {
        CMatrix ret = this;
        FrameDataGrid frm = new FrameDataGrid(ret);
        frm.setVisible(true);
        return this;
    }

    public CMatrix formatDouble(int n) {
        CMatrix ret = this.clone(this);

        double[][] r = new double[this.getRowNumber()][this.getColumnNumber()];
        for (int i = 0; i < this.getRowNumber(); i++) {
            for (int j = 0; j < this.getColumnNumber(); j++) {
                r[i][j] = FactoryUtils.formatDouble(ret.array[i][j], n);
            }
        }
        ret.setArray(r);
        ret.name = this.name + "|formatDouble";
        return ret;
    }

    public void fillMatrix(double n) {
        for (int i = 0; i < this.array.length; i++) {
            for (int j = 0; j < this.array[0].length; j++) {
                this.array[i][j] = n;
            }
        }
    }

    public CMatrix merge(CMatrix m2, String type) {
        CMatrix m1 = this.clone(this);
        CMatrix ret = null;

        //alt alta eklemek için ";" kullanılır
        if (type.equals(";")) {
            ret = CMatrix.this.zeros(m1.getRowNumber() + m2.getRowNumber(), m1.getColumnNumber());
            for (int i = 0; i < m1.getRowNumber(); i++) {
                ret.array[i] = m1.array[i];
            }
            for (int i = m1.getRowNumber(); i < m1.getRowNumber() + m2.getRowNumber(); i++) {
                ret.array[i] = m2.array[i - m1.getRowNumber()];
            }
        }
        //yan yana eklemek için "," kullanılır
        if (type.equals(",")) {
            ret = CMatrix.this.zeros(m1.getRowNumber(), m1.getColumnNumber() + m2.getColumnNumber());
            ret = ret.transpose();
            m1 = m1.transpose();
            m2 = m2.transpose();
            for (int i = 0; i < m1.getRowNumber(); i++) {
                ret.array[i] = m1.array[i];
            }
            for (int i = m1.getRowNumber(); i < m1.getRowNumber() + m2.getRowNumber(); i++) {
                ret.array[i] = m2.array[i - m1.getRowNumber()];
            }
            ret = ret.transpose();
//            returnedValue = merge(m2.transpose(), ";");
//            returnedValue = returnedValue.transpose();
        }
        ret.name = this.name + "|merge";

        return ret;
    }

    public CMatrix transpose() {
        CMatrix ret = CMatrix.this.zeros(getColumnNumber(), getRowNumber());
        ret.name = this.name + "|transpose";
        for (int i = 0; i < getColumnNumber(); i++) {
            for (int j = 0; j < getRowNumber(); j++) {
                ret.array[i][j] = array[j][i];
            }
        }
//        returnedValue.rgbImageArray = FactoryUtils.clone(rgbImageArray);
        ret.image = null;
        ret.name = this.name + "|transpose";
        return ret;
    }

//    public int[][] to2DArrayInteger() {
//        int[][] ret = new int[getRowNumber()][getColumnNumber()];
//        for (int i = 0; i < getRowNumber(); i++) {
//            for (int j = 0; j < getColumnNumber(); j++) {
//                ret[i][j] = (int) array[i][j];
//            }
//        }
//        return ret;
//    }
//
//    public double[][] to2DArrayDouble() {
//        return this.array;
//    }
//
//    /**
//     * this functions try to change the current matrix structure to 1D as
//     * Matlab's a(:) convention
//     *
//     * @return
//     */
//    public double[] to1DArrayDouble() {
//        double[] ret = FactoryUtils.to1D(this.array);
//        this.setArray(ret);
//        return ret;
//    }
//    public double[][][] to3DArrayDouble() {
//        return rgbImageArray;
//    }
//
//    public double[][][] get3DArrayDouble() {
//        return rgbImageArray;
//    }
//    public int[] to1DArrayInteger() {
//        int[] ret = new int[getRowNumber() * getColumnNumber()];
//        int k = 0;
//        for (int i = 0; i < getRowNumber(); i++) {
//            for (int j = 0; j < getColumnNumber(); j++) {
//                ret[k++] = (int) array[i][j];
//            }
//        }
//        return ret;
//    }
//
//    public byte[][] to2DArrayByte() {
//        byte[][] ret = new byte[getRowNumber()][getColumnNumber()];
//        for (int i = 0; i < getRowNumber(); i++) {
//            for (int j = 0; j < getColumnNumber(); j++) {
//                ret[i][j] = (byte) array[i][j];
//            }
//        }
//        return ret;
//    }
//
//    public short[][] to2DArrayShort() {
//        short[][] ret = new short[getRowNumber()][getColumnNumber()];
//        for (int i = 0; i < getRowNumber(); i++) {
//            for (int j = 0; j < getColumnNumber(); j++) {
//                ret[i][j] = (short) array[i][j];
//            }
//        }
//        return ret;
//    }
//
//    public byte[] to1DArrayByte() {
//        byte[] ret = new byte[getRowNumber() * getColumnNumber()];
//        int k = 0;
//        for (int i = 0; i < getRowNumber(); i++) {
//            for (int j = 0; j < getColumnNumber(); j++) {
//                ret[k++] = (byte) array[i][j];
//            }
//        }
//        return ret;
//    }
//
//    public short[] to1DArrayShort() {
//        short[] ret = new short[getRowNumber() * getColumnNumber()];
//        int k = 0;
//        for (int i = 0; i < getRowNumber(); i++) {
//            for (int j = 0; j < getColumnNumber(); j++) {
//                ret[k++] = (short) array[i][j];
//            }
//        }
//        return ret;
//    }
//
//    public long[][] to2DArrayLong() {
//        long[][] ret = new long[getRowNumber()][getColumnNumber()];
//        for (int i = 0; i < getRowNumber(); i++) {
//            for (int j = 0; j < getColumnNumber(); j++) {
//                ret[i][j] = (long) array[i][j];
//            }
//        }
//        return ret;
//    }
//
//    public long[] to1DArrayLong() {
//        long[] ret = new long[getRowNumber() * getColumnNumber()];
//        int k = 0;
//        for (int i = 0; i < getRowNumber(); i++) {
//            for (int j = 0; j < getColumnNumber(); j++) {
//                ret[k++] = (long) array[i][j];
//            }
//        }
//        return ret;
//    }
//
//    public float[][] to2DArrayFloat() {
//        float[][] ret = new float[getRowNumber()][getColumnNumber()];
//        for (int i = 0; i < getRowNumber(); i++) {
//            for (int j = 0; j < getColumnNumber(); j++) {
//                ret[i][j] = (float) array[i][j];
//            }
//        }
//        return ret;
//    }
//
//    public float[] to1DArrayFloat() {
//        float[] ret = new float[getRowNumber() * getColumnNumber()];
//        int k = 0;
//        for (int i = 0; i < getRowNumber(); i++) {
//            for (int j = 0; j < getColumnNumber(); j++) {
//                ret[k++] = (float) array[i][j];
//            }
//        }
//        return ret;
//    }
    public CMatrix subMatrix(CMatrix m, Point p1, Point p2) {
        int r = m.array.length;
        int c = m.array[0].length;
        CMatrix ret = m;
        if (p1.x < 0 || p1.y < 0 || p1.x > p2.x || p1.y > p2.y || p1.x > r || p1.y > c || p2.x > r || p2.y > c) {
            return null;
        } else {
            double[][] d = new double[p2.x - p1.x][p2.y - p1.y];
            for (int i = p1.x; i < p2.x; i++) {
                for (int j = p1.y; j < p2.y; j++) {
                    d[i - p1.x][j - p1.y] = m.array[i][j];
                }
            }
            ret.setArray(d);
            ret.name = this.name + "|submatrix";
            return ret;
        }
    }

    public CMatrix subMatrix(Point p1, Point p2) {
        CMatrix ret = this.clone(this);

        int r = ret.array[0].length;
        int c = ret.array.length;
        if (p1.x < 0 || p1.y < 0 || p1.x > p2.x || p1.y > p2.y || p1.x > r || p1.y > c || p2.x > r || p2.y > c) {
            return null;
        } else {
            double[][] d = new double[p2.y - p1.y][p2.x - p1.x];
            for (int i = p1.x; i < p2.x; i++) {
                for (int j = p1.y; j < p2.y; j++) {
                    d[j - p1.y][i - p1.x] = ret.array[j][i];
                }
            }
            ret.setArray(d);
            ret.name = this.name + "|submatrix";
            return ret;
        }
    }

    public CMatrix subMatrix(CPoint p1, CPoint p2) {
        CMatrix ret = this.clone(this);

        int r = ret.array[0].length;
        int c = ret.array.length;
        if (p1.column < 0 || p1.row < 0 || p1.column > p2.column || p1.row > p2.row || p1.column > r || p1.row > c || p2.column > r || p2.row > c) {
            return null;
        } else {
            double[][] d = new double[p2.row - p1.row][p2.column - p1.column];
            for (int i = p1.column; i < p2.column; i++) {
                for (int j = p1.row; j < p2.row; j++) {
                    d[j - p1.row][i - p1.column] = ret.array[j][i];
                }
            }
            ret.setArray(d);
            ret.name = this.name + "|submatrix";
            return ret;
        }
    }

    public CMatrix subMatrix(Rectangle rect) {
        Point p1 = new Point(rect.x, rect.y);
        Point p2 = new Point(rect.x + rect.width, rect.y + rect.height);
        return subMatrix(p1, p2);
    }

    /**
     * Biiznillah Matlab de herhangi bir matrisin içeriğini mesela
     * a=b([1,4,11]); şeklinde alabiliyorduk burada aynı işlem yapılmaya
     * çalışılmıştır. 1 parametre girilse row lardan ilgili index teki verileri
     * filtreler 2 paramatre girilirse hem row hem column filtresi yapar.
     *
     * dynamic parameter
     *
     * @param p
     * @return
     */
    public CMatrix matrix(int[]... p) {
        double[][] d;
        if (p.length == 0) {
            return null;
        } else if (p.length == 1) {
            int[] rows = p[0];
            d = new double[rows.length][this.getColumnNumber()];
            for (int i = 0; i < rows.length; i++) {
                d[i] = this.array[rows[i]];
            }
        } else {
            int[] rows = p[0];
            int[] cols = p[1];
            d = new double[rows.length][this.getColumnNumber()];
            for (int i = 0; i < rows.length; i++) {
                d[i] = this.array[rows[i]];
            }
            d = new CMatrix(d).transpose().array;
            double[][] d2 = new double[cols.length][d[0].length];
            for (int i = 0; i < cols.length; i++) {
                d2[i] = d[cols[i]];
            }
            d = new CMatrix(d2).transpose().array;;
        }
        CMatrix ret = new CMatrix(d);
        ret.name = this.name + "|submatrix";
        return ret;
    }

    public CMatrix row(CMatrix prev, int[] rows) {
        double[][] d;
        d = new double[rows.length][this.getColumnNumber()];
        for (int i = 0; i < rows.length; i++) {
            d[i] = this.array[rows[i]];
        }
        CMatrix ret = this.clone(this);

        ret.array = d;
        ret.name = this.name + "|row";
        ret.prevMatrix = prev;
        return ret;
    }

    public CMatrix column(CMatrix prev, int[] cols) {
        double[][] yedek = new CMatrix(array).transpose().array;
        double[][] d = new double[cols.length][yedek[0].length];
        for (int i = 0; i < cols.length; i++) {
            d[i] = yedek[cols[i]];
        }
        d = new CMatrix(d).transpose().array;
        CMatrix ret = new CMatrix(d);
        ret.name = this.name + "|column";
        ret.prevMatrix = prev;
        return ret;
    }

    /**
     * converts 2D Matrix to 1D matrix by executing : command
     *
     * @return CMatrix
     */
    public CMatrix matrix(String p) {
        CMatrix ret = this.clone(this);

        if (p.equals(":")) {
            ret = new CMatrix(ret.toDoubleArray1D());
        }
        return ret;
    }

    /**
     * Tries to interpret String parameter as Matlab vectorization commands like
     * that interpret([1,3,5],[3,7]) means get subset based on the specified
     * criteria
     *
     * @param p
     * @return
     */
    public CMatrix cmd(int[]... p) {
        return matrix(p);
    }

    /**
     * Tries to interpret String parameter as Matlab vectorization commands like
     * that interpret(":") means get subset based on the specified criteria
     *
     * @param p
     * @return
     */
    public CMatrix cmd(String p) {
        return matrix(p);
    }

    /**
     * Tries to interpret String parameter as Matlab vectorization commands like
     * that interpret(d,"5:end","0:3") means get subset based on the specified
     * criteria
     *
     * @param p1 : integer bir sayi veya [x,y,z] veya [x;y;z] olabilir
     * @param p2 : integer bir sayi veya [x,y,z] veya [x;y;z] olabilir
     * @return
     */
    public CMatrix cmd(String p1, String p2) {
        return commandParser(p1, p2);
    }

    /**
     * B. Matlab'deki matris işlemlerine banzer işlemleri bu parser üzerinden
     * gerçekleştirmeye çalışır.
     *
     * Dikkat: " " içerisinde normal veya köşeli parantez kullanmanız gerekmez.
     *
     * @param p1 ": veya integer bir sayi veya [x,y,z] veya [x;y;z] olabilir"
     * @param p2 ": veya integer bir sayi veya [x,y,z] veya [x;y;z] olabilir"
     * @return
     */
    public CMatrix commandParser(String p1, String p2) {
        p1 = p1.replace("[", "").replace("]", "").replace("(", "").replace(")", "");
        p2 = p2.replace("[", "").replace("]", "").replace("(", "").replace(")", "");
        CMatrix ret = this.clone(this);

        if (p1.equals(":") && p2.equals(":")) {
            return ret;
        }
        if (p1.equals(":")) {
            if (p2.equals(":")) {
                return this;
            } else if (p2.length() == 1) {
                int[] p = {Integer.parseInt(p2)};
                ret = column(ret, p);
            } else {
                int[] p = checkParam(p2, this.getColumnNumber());
                ret = column(ret, p);
            }
        } else if (p2.equals(":")) {
            if (p1.equals(":")) {
                return this;
            } else if (p1.length() == 1) {
                int[] p = {Integer.parseInt(p1)};
                ret = row(ret, p);
            } else {
                int[] p = checkParam(p1, this.getRowNumber());
                ret = row(ret, p);
            }
        } //        else if (p1.contains(":") & p2.contains(":")) {
        //            
        //        } else if (p1.contains(":")) {
        //        } else if (p2.contains(":")) {
        else {
            int[] pp1 = checkParam(p1, this.getRowNumber());
            int[] pp2 = checkParam(p2, this.getColumnNumber());
            ret = matrix(pp1, pp2);
        }
//        ret=ret.transpose();
        ret.name = this.name + "|submatrix";
        return ret;
    }

    /**
     * B.Matlabdeki randperm in aynısı Görevi kendisine verilen n sayısına kadar
     * random indexler üretmek
     *
     * @param n
     * @return
     */
    public CMatrix randPerm(int n) {
        double[] m = new double[n];
        ArrayList<Double> v = new ArrayList<Double>();
        for (int i = 0; i < n; i++) {
            v.add(new Double(i));
        }
        for (int i = 0; i < n; i++) {
            int a = new Random().nextInt(n - i);
            m[i] = v.get(a);
            v.remove(a);
        }
        CMatrix ret = new CMatrix(m);
        return ret.clone(this);
    }

    /**
     * B.Matlabdeki randperm in aynısı Görevi kendisine verilen n sayısına kadar
     * random indexler üretmek
     *
     * @param n
     * @return
     */
    public CMatrix randPerm(int from, int to) {
        int n = to - from;
        double[] m = new double[n];
        ArrayList<Double> v = new ArrayList<Double>();
        for (int i = from; i < to; i++) {
            v.add(new Double(i));
        }
        for (int i = 0; i < n; i++) {
            int a = new Random().nextInt(n - i);
            m[i] = v.get(a);
            v.remove(a);
        }
        CMatrix ret = new CMatrix(m);
        return ret.clone(this);
    }

    public int[] randPermInt(int n) {
        int[] m = new int[n];
        ArrayList<Integer> v = new ArrayList<Integer>();
        for (int i = 0; i < n; i++) {
            v.add(new Integer(i));
        }
        for (int i = 0; i < n; i++) {
            int a = new Random().nextInt(n - i);
            m[i] = v.get(a);
            v.remove(a);
        }
        return m;
    }

    public CMatrix minusScalar(double n) {
        CMatrix ret = this.clone(this);

        for (int i = 0; i < ret.getRowNumber(); i++) {
            for (int j = 0; j < ret.getColumnNumber(); j++) {
                ret.array[i][j] = ret.array[i][j] - n;
            }
        }
        ret.name = this.name + "|minus";
        return ret;
    }

    /**
     * n-CMatrix
     *
     * @param n
     * @return
     */
    public CMatrix minusFromScalar(double n) {
        CMatrix ret = this.clone(this);

        for (int i = 0; i < ret.getRowNumber(); i++) {
            for (int j = 0; j < ret.getColumnNumber(); j++) {
                ret.array[i][j] = n - ret.array[i][j];
            }
        }
        ret.name = this.name + "|minus";
        return ret;
    }

    public CMatrix addScalar(double n) {
        CMatrix ret = this.clone(this);

        for (int i = 0; i < ret.getRowNumber(); i++) {
            for (int j = 0; j < ret.getColumnNumber(); j++) {
                ret.array[i][j] = ret.array[i][j] + n;
            }
        }
        ret.name = this.name + "|add";
        return ret;
    }

    public CMatrix plusScalar(double n) {
        CMatrix ret = this.clone(this);

        for (int i = 0; i < ret.getRowNumber(); i++) {
            for (int j = 0; j < ret.getColumnNumber(); j++) {
                ret.array[i][j] = ret.array[i][j] + n;
            }
        }
        ret.name = this.name + "|plus";
        return ret;
    }

    public CMatrix exp() {
        CMatrix ret = this.clone(this);

        for (int i = 0; i < ret.getRowNumber(); i++) {
            for (int j = 0; j < ret.getColumnNumber(); j++) {
                ret.array[i][j] = Math.exp(ret.array[i][j]);
            }
        }
        ret.name = this.name + "|exp";
        return ret;
    }

    public CMatrix log() {
        CMatrix ret = this.clone(this);

        for (int i = 0; i < ret.getRowNumber(); i++) {
            for (int j = 0; j < ret.getColumnNumber(); j++) {
                ret.array[i][j] = Math.log(ret.array[i][j]);
            }
        }
        ret.name = this.name + "|log";
        return ret;
    }

    public CMatrix logPlusScalar(double n) {
        CMatrix ret = this.clone(this);

        for (int i = 0; i < ret.getRowNumber(); i++) {
            for (int j = 0; j < ret.getColumnNumber(); j++) {
                ret.array[i][j] = Math.log(ret.array[i][j] + n);
            }
        }
        ret.name = this.name + "|log";
        return ret;
    }

    public CMatrix log10() {
        CMatrix ret = this.clone(this);

        for (int i = 0; i < ret.getRowNumber(); i++) {
            for (int j = 0; j < ret.getColumnNumber(); j++) {
                ret.array[i][j] = Math.log10(ret.array[i][j]);
            }
        }
        ret.name = this.name + "|log10";
        return ret;
    }

    public CMatrix pow(double n) {
        CMatrix ret = this.clone(this);

        for (int i = 0; i < ret.getRowNumber(); i++) {
            for (int j = 0; j < ret.getColumnNumber(); j++) {
                ret.array[i][j] = Math.pow(ret.array[i][j], n);
            }
        }
        ret.name = this.name + "|pow";
        return ret;
    }

    public CMatrix sin() {
        CMatrix ret = this.clone(this);

        ret.image = null;
        for (int i = 0; i < ret.getRowNumber(); i++) {
            for (int j = 0; j < ret.getColumnNumber(); j++) {
                ret.array[i][j] = Math.sin(ret.array[i][j]);
            }
        }
        ret.name = this.name + "|sin";
        return ret;
    }

    /**
     * sinc(x) is a partial function normalized with pi which is defined as |1,
     * t=0 sinc(x) =| |sin(pi*x)/(pi*x) t<>0
     *
     *
     * @return
     */
    public CMatrix sinc() {
        CMatrix ret = this.clone(this);

        ret.image = null;
        for (int i = 0; i < ret.getRowNumber(); i++) {
            for (int j = 0; j < ret.getColumnNumber(); j++) {
                if (ret.array[i][j] != 0) {
                    ret.array[i][j] = Math.sin(Math.PI * ret.array[i][j]) / (Math.PI * ret.array[i][j]);
                } else {
                    ret.array[i][j] = 1;
                }

            }
        }
        ret.name = this.name + "|sinc";
        return ret;
    }

    public CMatrix cos() {
        CMatrix ret = this.clone(this);

        ret.image = null;
        for (int i = 0; i < ret.getRowNumber(); i++) {
            for (int j = 0; j < ret.getColumnNumber(); j++) {
                ret.array[i][j] = Math.cos(ret.array[i][j]);
            }
        }
        ret.name = this.name + "|cos";
        return ret;
    }

    public CMatrix tan() {
        CMatrix ret = this.clone(this);

        ret.image = null;
        for (int i = 0; i < ret.getRowNumber(); i++) {
            for (int j = 0; j < ret.getColumnNumber(); j++) {
                ret.array[i][j] = Math.tan(ret.array[i][j]);
            }
        }
        ret.name = this.name + "|tan";
        return ret;
    }

    public CMatrix tanh() {
        CMatrix ret = this.clone(this);

        ret.image = null;
        for (int i = 0; i < ret.getRowNumber(); i++) {
            for (int j = 0; j < ret.getColumnNumber(); j++) {
                ret.array[i][j] = Math.tanh(ret.array[i][j]);
            }
        }
        ret.name = this.name + "|tanh";
        return ret;
    }

    public CMatrix sigmoid() {
        CMatrix ret = this.clone(this);

        ret.image = null;
        ret.array = FactoryMatrix.sigmoid(ret.array);
        ret.name = this.name + "|sigmoid";
        return ret;
    }

    public CMatrix sigmoid(double beta) {
        CMatrix ret = this.clone(this);

        ret.image = null;
        ret.array = FactoryMatrix.sigmoid(ret.array, beta);
        ret.name = this.name + "|sigmoid";
        return ret;
    }

    public CMatrix sigmoid(double alpha, double beta) {
        CMatrix ret = this.clone(this);

        ret.image = null;
        ret.array = FactoryMatrix.sigmoid(ret.array, alpha, beta);
        ret.name = this.name + "|sigmoid";
        return ret;
    }

    public CMatrix abs() {
        CMatrix ret = this.clone(this);

        ret.image = null;
        for (int i = 0; i < ret.getRowNumber(); i++) {
            for (int j = 0; j < ret.getColumnNumber(); j++) {
                ret.array[i][j] = Math.abs(ret.array[i][j]);
            }
        }
        ret.name = this.name + "|abs";
        return ret;
    }

    /**
     * Calculate square root of each element (element wised operation)
     *
     * @return CMatrix
     */
    public CMatrix sqrt() {
        CMatrix ret = this.clone(this);

        ret.image = null;
        for (int i = 0; i < ret.getRowNumber(); i++) {
            for (int j = 0; j < ret.getColumnNumber(); j++) {
                ret.array[i][j] = Math.sqrt(ret.array[i][j]);
            }
        }
        ret.name = this.name + "|sqrt";
        return ret;
    }

    public CMatrix round() {
        CMatrix ret = this.clone(this);

        ret.image = null;
        for (int i = 0; i < ret.getRowNumber(); i++) {
            for (int j = 0; j < ret.getColumnNumber(); j++) {
                ret.array[i][j] = Math.round(ret.array[i][j]);
            }
        }
        ret.name = this.name + "|round";
        return ret;
    }

    public CMatrix toDegrees() {
        CMatrix ret = this.clone(this);

        ret.image = null;
        for (int i = 0; i < ret.getRowNumber(); i++) {
            for (int j = 0; j < ret.getColumnNumber(); j++) {
                ret.array[i][j] = Math.toDegrees(ret.array[i][j]);
            }
        }
        ret.name = this.name + "|degree";
        return ret;
    }

    public CMatrix toRadians() {
        CMatrix ret = this.clone(this);

        ret.image = null;
        for (int i = 0; i < ret.getRowNumber(); i++) {
            for (int j = 0; j < ret.getColumnNumber(); j++) {
                ret.array[i][j] = Math.toRadians(ret.array[i][j]);
            }
        }
        ret.name = this.name + "|radians";
        return ret;
    }

    public TMatrixCell max() {
        CMatrix ret = this.clone(this);

        TMatrixCell mc = new TMatrixCell();
        double m = ret.toDoubleArray2D()[0][0];
        for (int i = 0; i < ret.getRowNumber(); i++) {
            for (int j = 0; j < ret.getColumnNumber(); j++) {
                if (m < ret.toDoubleArray2D()[i][j]) {
                    m = ret.toDoubleArray2D()[i][j];
                    mc.value = m;
                    mc.p = new Point(i, j);
                }
            }
        }
        return mc;
    }

    public TMatrixCell min() {
        CMatrix ret = this.clone(this);

        TMatrixCell mc = new TMatrixCell();
        double m = ret.toDoubleArray2D()[0][0];
        for (int i = 0; i < ret.getRowNumber(); i++) {
            for (int j = 0; j < ret.getColumnNumber(); j++) {
                if (m > ret.toDoubleArray2D()[i][j]) {
                    m = ret.toDoubleArray2D()[i][j];
                    mc.value = m;
                    mc.p = new Point(i, j);
                }
            }
        }
        return mc;
    }

    public double sumTotal() {
        CMatrix ret = this.clone(this);

        double m = 0;
        for (int i = 0; i < ret.getRowNumber(); i++) {
            for (int j = 0; j < ret.getColumnNumber(); j++) {
                m += ret.toDoubleArray2D()[i][j];
            }
        }
        return m;
    }

    public double prodTotal() {
        CMatrix ret = this.clone(this);

        double m = 1;
        double[][] d = ret.toDoubleArray2D();
        for (int i = 0; i < ret.getRowNumber(); i++) {
            for (int j = 0; j < ret.getColumnNumber(); j++) {
                m *= d[i][j];
            }
        }
        return m;
    }

    public double meanTotal() {
        double m = this.sumTotal() / (this.getColumnNumber() * this.getRowNumber());
        return m;
    }

    /**
     * equals to meanTotal()
     *
     * @return
     */
    public double getMean() {
        double m = this.sumTotal() / (this.getColumnNumber() * this.getRowNumber());
        return m;
    }

    public double stdTotal() {
        double ret = FactoryUtils.std(this.matrix(":").getColumn(0));
        return ret;
    }

    /**
     * equals to stdTotal()
     *
     * @return
     */
    public double getStd() {
        double ret = FactoryUtils.std(this.matrix(":").getColumn(0));
        return ret;
    }

    /**
     * Sutun bazlı toplama işlemi yapar mxn matrisinin tüm elemanlarını toplamak
     * istiyorsanız sumTotal veya iki defa sum çağırınız
     *
     * @return CMatrix
     */
    public CMatrix sum() {
        double[] r = new double[this.getColumnNumber()];
        CMatrix ret = new CMatrix(r);
        CMatrix cm = this.clone(this).transpose();
        for (int i = 0; i < cm.getRowNumber(); i++) {
            r[i] = FactoryUtils.sum(cm.array[i]);
        }
        ret.setArray(r);
        ret.name = this.name + "|sum";
        return ret;
    }

    /**
     * Sutun bazlı çarpma işlemi yapar mxn matrisinin tüm elemanlarını çarpmak
     * istiyorsanız prodTotal veya iki defa prod çağırınız
     *
     * @return CMatrix
     */
    public CMatrix prod() {
        double[] r = new double[this.getColumnNumber()];
        CMatrix ret = new CMatrix(r);
        CMatrix cm = this.clone(this).transpose();
        for (int i = 0; i < cm.getRowNumber(); i++) {
            r[i] = FactoryUtils.prod(cm.array[i]);
        }
        ret.setArray(r);
        ret.name = this.name + "|sum";
        return ret;
    }

    public CMatrix mean() {
        double[] r = new double[this.getColumnNumber()];
        CMatrix ret = new CMatrix(r);
        CMatrix cm = this.clone(this).transpose();
        for (int i = 0; i < cm.getRowNumber(); i++) {
            r[i] = FactoryUtils.mean(cm.array[i]);
        }
        ret.setArray(r);
        ret.name = this.name + "|mean";
        return ret;
    }

    public CMatrix std() {
        double[] r = new double[this.getColumnNumber()];
        CMatrix ret = new CMatrix(r);
        CMatrix cm = this.clone(this).transpose();
        for (int i = 0; i < cm.getRowNumber(); i++) {
            r[i] = FactoryUtils.std(cm.array[i]);
        }
        ret.setArray(r);
        ret.name = this.name + "|std";
        return ret;
    }

    public CMatrix var() {
        double[] r = new double[this.getColumnNumber()];
        CMatrix ret = new CMatrix(r);
        CMatrix cm = this.clone(this).transpose();
        for (int i = 0; i < cm.getRowNumber(); i++) {
            r[i] = FactoryUtils.var(cm.array[i]);
        }
        ret.setArray(r);
        ret.name = this.name + "|std";
        return ret;
    }

    public CMatrix divideScalar(double n) {
        CMatrix ret = this.clone(this);

        ret.image = null;
        for (int i = 0; i < ret.getRowNumber(); i++) {
            for (int j = 0; j < ret.getColumnNumber(); j++) {
                ret.array[i][j] = ret.array[i][j] / n;
            }
        }
        ret.name = this.name + "|divide";
        return ret;
    }

    public CMatrix divideByScalar(double n) {
        CMatrix ret = this.clone(this);

        ret.image = null;
        for (int i = 0; i < ret.getRowNumber(); i++) {
            for (int j = 0; j < ret.getColumnNumber(); j++) {
                ret.array[i][j] = n / ret.array[i][j];
            }
        }
        ret.name = this.name + "|divideby";
        return ret;
    }

    public CMatrix dot(CMatrix cm) {
        if (!this.isIdentical(this, cm)) {
            System.out.println("Matrixes should be identical in size");
            return this;
        }
        CMatrix ret = this.clone(this);

        ret.setArray(FactoryMatrix.dot(ret.array, cm.array));
        return ret;
    }

    public CMatrix dotProduct(CMatrix cm) {
        return dot(cm);
    }

    public CMatrix getMagnitude() {
        CMatrix ret = this.clone(this);

        ret.array = FactoryMatrix.getMagnitude(ret.array);
        return ret;
    }

    public CMatrix getMagnitude(CMatrix cm) {
        CMatrix ret = this.clone(this);

        ret.array = FactoryMatrix.getMagnitude(cm.array);
        return ret;
    }

    public CMatrix getAngle(CMatrix second) {
        return calculateCosineTheoremWithDotProduct(second);
    }

    public CMatrix calculateCosineTheoremWithDotProduct(CMatrix second) {
        CMatrix ret = this.clone(this);

        double[][] d = new double[1][1];
        d[0][0] = Math.acos(ret.dotProduct(second).getValue() / (ret.getMagnitude().getValue() * second.getMagnitude().getValue())) / Math.PI * 180;
        ret.setArray(d);
        return ret;
    }

    public CMatrix dot(CMatrix cm, int dm) {
        if (!this.isIdentical(this, cm)) {
            System.out.println("Matrixes should be identical in size");
            return this;
        }
        CMatrix ret = this.clone(this);

        ret.setArray(FactoryMatrix.dot(ret.array, cm.array, dm));
        return ret;
    }

    public CMatrix timesScalar(double n) {
        CMatrix ret = this.clone(this);

        ret.image = null;
        for (int i = 0; i < ret.getRowNumber(); i++) {
            for (int j = 0; j < ret.getColumnNumber(); j++) {
                ret.array[i][j] = ret.array[i][j] * n;
            }
        }
        ret.name = this.name + "|timesScalar";
        return ret;
    }

//    public CMatrix dot(CMatrix cm) {
//        return multiplyElement(cm);
//    }
    /**
     * Matlab compatible command: element wise multiplication
     *
     * @param cm : second matrix
     *
     * @return CMatrix
     */
    public CMatrix times(CMatrix cm) {
        if (this.getColumnNumber() != cm.getRowNumber()) {
//            System.out.println("can not multiply please make sure two matrix obey the matrix multiplication rule i.e. column number of first matrix must equal to the coulmnumber of the second matrix");
            throw new InputMismatchException("can not multiply please make sure two matrix obey the matrix multiplication rule i.e. column number of first matrix must equal to the coulmnumber of the second matrix");
//            return null;
        }
        CMatrix ret = new CMatrix(this.getRowNumber(), cm.getColumnNumber());
        cm = cm.transpose();
        for (int r = 0; r < ret.getRowNumber(); r++) {
            for (int c = 0; c < ret.getColumnNumber(); c++) {
                ret.array[r][c] = FactoryUtils.multiplyAndSum(this.getRow(r), cm.getRow(c));
            }
        }
        ret.name = this.name + "|times";
        return ret;
    }

    public CMatrix multiplyScalar(double n) {
        CMatrix ret = this.clone(this);

        ret.image = null;
        for (int i = 0; i < ret.getRowNumber(); i++) {
            for (int j = 0; j < ret.getColumnNumber(); j++) {
                ret.array[i][j] = ret.array[i][j] * n;
            }
        }
        ret.name = this.name + "|multiply";
        return ret;
    }

    public CMatrix scale(double n) {
        return multiplyScalar(n);
    }

    public String toString(String var) {
        String s = var + "=\n";
        s += "Matrix of [" + this.getRowNumber() + "x" + this.getColumnNumber() + "]=\n";

        for (int i = 0; i < this.getRowNumber(); i++) {
            String r = "";
            for (int j = 0; j < this.getColumnNumber(); j++) {
                r += this.array[i][j] + "\t";
            }
            s += r + "\n";
        }
        return s;
    }

    public String toStringWithToken(String token) {
        String s = "";

        for (int i = 0; i < this.getRowNumber(); i++) {
            String r = "";
            for (int j = 0; j < this.getColumnNumber(); j++) {
                r += this.array[i][j] + token;
            }
            s += r;
        }
        s = s.substring(0, s.length() - 1);
        return s;
    }

    @Override
    public String toString() {
        String s = "Matrix of [" + this.getRowNumber() + "x" + this.getColumnNumber() + "]=\n";
        for (int i = 0; i < this.getRowNumber(); i++) {
            String r = "";
            for (int j = 0; j < this.getColumnNumber(); j++) {
                r += this.array[i][j] + "\t";
            }
            s += r + "\n";
        }
        return s;
    }

    public String toCommaString() {
        String s = "";
        for (int i = 0; i < this.getRowNumber(); i++) {
            String r = "";
            for (int j = 0; j < this.getColumnNumber(); j++) {
                r += (this.array[i][j] + "").replace(".", ",") + "\t";
            }
            if (i < this.getRowNumber() - 1) {
                s += r + "\n";
            } else {
                s += r;
            }
        }
        return s;
    }

    public String toCSVString() {
        String s = "";
        for (int i = 0; i < this.getRowNumber(); i++) {
            String r = "";
            for (int j = 0; j < this.getColumnNumber(); j++) {
                r += this.array[i][j] + ";";
            }
            s += r + "\n";
        }
        return s;
    }

    public String toCommaStringWithIdentifier() {
        String s = "Matrix of [" + this.getRowNumber() + "x" + this.getColumnNumber() + "]=\n";
        for (int i = 0; i < this.getRowNumber(); i++) {
            String r = "";
            for (int j = 0; j < this.getColumnNumber(); j++) {
                r += (this.array[i][j] + "").replace(".", ",") + "\t";
            }
            s += r + "\n";
        }
//        System.out.println(s);
        return s;
    }

    public CMatrix printlnComma() {
        System.out.println(this.toCommaString());
        return this;
    }

    public CMatrix printlnComma(String s) {
        System.out.println(s + "\n" + this.toCommaString());
        return this;
    }

    /**
     * print each element of CMatrix double[][] data as a Matrix Form
     *
     * @return CMatrix
     */
    public CMatrix println() {
        System.out.println(this.toString());
        return this;
    }

    /**
     * print top 5 rows of CMatrix double[][] data with column names if
     * available
     *
     * @return CMatrix
     */
    public CMatrix head() {
        System.out.println("Matrix of [" + array.length + "x" + array[0].length + "]");
        if (columnNames != null && !columnNames.isEmpty()) {
            for (String columnName : columnNames) {
                System.out.print(columnName + "\t");
            }
            System.out.println("");
        }
        if (classLabels != null && !classLabels.isEmpty()) {
            for (int i = 0; i < 5; i++) {
                for (int j = 0; j < array[0].length; j++) {
                    System.out.print(FactoryUtils.formatDouble(array[i][j]) + "\t");
                }
                System.out.println(classLabels.get(i));
            }
        } else {
            for (int i = 0; i < 5; i++) {
                for (int j = 0; j < array[0].length; j++) {
                    System.out.print(array[i] + "\t");
                }
                System.out.println("");
            }
        }
        return this;
    }

    public CMatrix println(String s) {
        System.out.println(toString(s));
        return this;
    }

    /**
     * print the content of the matrix
     *
     * @return
     */
    public CMatrix dump() {
        System.out.println(this.toString());
        return this;
    }

    /**
     * print the content of the matrix by adding extra info on the head
     *
     * @param s
     * @return
     */
    public CMatrix dump(String s) {
        System.out.println(toString(s));
        return this;
    }

    public CMatrix fprintln(String file) {
        FactoryUtils.writeToFile(file, this.toString());
        return this;
    }

    public CMatrix fprintln() {
        FactoryUtils.writeToFile(this.toString());
        return this;
    }

    public CMatrix toNewFile() {
        FactoryUtils.writeToFile(this.toString());
        return this;
    }

    public CMatrix toAppendFile() {
        FactoryUtils.writeOnFile(this.toString());
        return this;
    }

    public CMatrix toNewFileCSV(String file) {
        FactoryUtils.writeToFile(file, this.toCSVString());
        return this;
    }

    public CMatrix toNewFile(String file) {
        FactoryUtils.writeToFile(file, this.toCSVString());
        return this;
    }

    public CMatrix writeToNewFileCSV(String file) {
        toNewFileCSV(file);
        return this;
    }

    public CMatrix writeToNewFile(String file) {
        toNewFile(file);
        return this;
    }

    public CMatrix saveAsNewFileCSV(String file) {
        toNewFileCSV(file);
        return this;
    }

    public CMatrix writeOnFile(String file) {
        toAppendFile(file);
        return this;
    }

    public CMatrix saveOnFile(String file) {
        toAppendFile(file);
        return this;
    }

    /**
     *
     * @param file_path
     * @param learning_type :TLearningType.REGRESSION or
     * TLearningType.CLASSIFICATION
     * @return
     */
    public CMatrix toWekaArff(String file_path, int learning_type) {
        FactoryUtils.writeToArffFile(file_path, array, learning_type);
        return this;
    }

    /**
     *
     * @param file_path
     * @param learning_type :TLearningType.REGRESSION or
     * TLearningType.CLASSIFICATION
     * @return
     */
    public CMatrix toARFF(String file_path, int learning_type) {
        FactoryUtils.writeToArffFile(file_path, array, learning_type);
        return this;
    }

    /**
     *
     * @param file_path
     * @param learning_type :TLearningType.REGRESSION or
     * TLearningType.CLASSIFICATION
     * @return
     */
    public CMatrix writeAsArffFile(String file_path, int learning_type) {
        FactoryUtils.writeToArffFile(file_path, array, learning_type);
        return this;
    }

    public CMatrix toAppendFile(String file) {
        FactoryUtils.writeOnFile(file, this.toString());
        return this;
    }

//    public CMatrix toXMLFile() {
//        FactoryUtils.writeToXML(this.clone(this));
//        return this;
//    }
//
//    public String toXML() {
//        return FactoryUtils.toXML(this.clone(this));
//    }
//
//    public CMatrix fromXML(String s) {
//        return (CMatrix) FactoryUtils.fromXML(s);
//    }
//
//    public CMatrix fromXMLFile() {
//        return (CMatrix) FactoryUtils.fromXMLFile();
//    }
//
//    public void toXMLPrintln() {
//        System.out.println(FactoryUtils.toXML(this.clone(this)));
//    }
    private int[] checkParam(String p, int n) {
//        String s = p.substring(1, p.length() - 1);
        String s = p;
        int[] ret = null;
        char[] chr = s.toCharArray();
        if (s.indexOf(":") != -1) {
            String[] ss = s.split(":");
            if (ss.length <= 2) {
                if (ss[1].indexOf("end") != -1) {
                    ss[1] = ss[1].replace("end", (n - 1) + "");
                }
                ret = FactoryUtils.toIntArray1D(vector(Integer.parseInt(ss[0]) * 1.0, Integer.parseInt(ss[1]) * 1.0).toDoubleArray1D());
            } else {
                if (ss[2].indexOf("end") != -1) {
                    ss[2] = ss[2].replace("end", (n - 1) + "");
                }
                ret = FactoryUtils.toIntArray1D(CMatrix.this.vector(Integer.parseInt(ss[0]) * 1.0, Integer.parseInt(ss[1]) * 1.0, Integer.parseInt(ss[2]) * 1.0).toDoubleArray1D());
            }
        } else {
            if (s.length() > 1) {
//                String[] str = str = s.split(chr[1] + "");
                String[] str;
                if (s.contains(" ")) {
                    str = s.split(" ");
                } else if (s.contains(",")) {
                    str = s.split(",");
                } else if (s.contains(";")) {
                    str = s.split(";");
                } else {
                    ret = new int[1];
                    ret[0] = Integer.parseInt(s);
                    return ret;
                }
                ret = new int[str.length];
                for (int i = 0; i < str.length; i++) {
                    ret[i] = Integer.parseInt(str[i]);
                }
            } else {
//                ret = new int[s.length()];
//                ret[0] = Integer.parseInt(s.charAt(0) + "");
                ret = new int[1];
                ret[0] = Integer.parseInt(s);
                return ret;
            }
        }
        return ret;
    }

    /**
     * B. Matlab deki find komutuna banzer çalışmaktadır. find her zaman 1
     * sütünlu n satırlı sütün matrisi geri dönderir içerik olarak ta sadece
     * index bilgisini tutar
     *
     * @param op TMatrixOperator enum tipindeki sınıfı call eder.
     * @param d taranacak base matris
     * @param x matrisin elemanları neye eşitse
     * @return
     *
     */
    public CMatrix find(TMatrixOperator op, CMatrix d, double x) {
        return op.apply(d, x);
    }

    /**
     * operates as Matlab's find method try to find 1D indexes of the matrix
     * based on the specified matrix operator logical conditions returns cloned
     * matrix indeed found indexes are provided in int[] d parameter object
     *
     * @param op:logical criteria
     * @param x :Target value or matching constant number
     * @return
     */
    public CMatrix find(TMatrixOperator op, double x) {
        CMatrix ret = this.clone(this);

        ret = op.apply(ret, x);
        return ret;
    }

    /**
     * find metodu istenilen bir karşılaştırma işlemi ve karşılaştırmada
     * kullanılacak x değerini matlab matris ifadeleri ile belirli bir sütun
     * veya sub-matrix üzerinde işleyerek bulduğu row ların satır numaralarını
     * 1D vektör olarak geri dönderir. Kullanıcı eğer isterse bu vektörü *
     * operates as Matlab's find method try to find 1D indexes of the matrix
     * based on the specified matrix operator logical conditions returns cloned
     * matrix indeed found indexes are provided in int[] d parameter object
     *
     * @param op:logical criteria
     * @param x :Target value or matching constant number
     * @return
     */
    public CMatrix find(TMatrixOperator op, double x, String p1, String p2) {
        CMatrix ret = this.clone(this);

        ret = op.apply(ret, x, p1, p2);
        return ret;
    }

    /**
     * adaptive threshold could be performed, operates as Matlab's find method
     * try to find 1D indexes of the matrix based on the specified matrix
     * operator logical conditions returns cloned matrix indeed found indexes
     * are provided in int[] d parameter object
     *
     * @param op:logical criteria
     * @param x :Target value or matching constant number
     * @return
     */
    public CMatrix find(TMatrixOperator op, double t1, double t2) {
        CMatrix ret = this.clone(this);

        ret = op.apply(ret, t1, t2);
        return ret;
    }

    /**
     * it is used for detecting the single any object in the image matrix and
     * crop the roi of the object from the matrix. it should be noted that
     * internally it is used nf=nearFactor which you should give as a parameter
     *
     * @param thr:threshold value for average pistachio
     * @param backgroundThr:threshold for background subtraction
     * @param nf:near factor how far object from the edge of the image matrix
     * @return cropped matrix related to the object itself
     */
    public CMatrix getWeightCenteredROI(int thr, int backgroundThr, int nf) {
        double[][] d = CMatrix.this.highPassFilter(this.array, backgroundThr).array;
        d = FactoryUtils.getWeightCenteredROI(d, thr, nf);
        if (d != null) {
            this.array = FactoryMatrix.clone(d);
            CMatrix ret = this.clone(this);

            return ret;
        } else {
            return this;
        }
    }

    public CMatrix getWeightCenteredROI() {
        double[][] d = FactoryUtils.getWeightCenteredROI(this.array);
        if (d != null) {
            this.array = FactoryMatrix.clone(d);
            CMatrix ret = this.clone(this);

            return ret;
        } else {
            return this;
        }
    }

    /**
     * Calculate the pixel area of the object in the scene
     *
     * @param thr: average pixel value of the object, you can determine this
     * value by otsu threshold also
     * @param isTextVisible: whether info will be written or not
     * @return
     */
    public CMatrix getObjectArea(int thr, boolean isTextVisible) {
        this.returnedValue.str = "" + FeatureExtractionPistachio.getPixelArea(this.toDoubleArray2D(), thr);
        if (isTextVisible) {
            System.out.println("Calculated Object Area is:" + this.returnedValue.str);
        }
        return this;
    }

    public CMatrix getObjectArea() {
        this.returnedValue.str = "" + FeatureExtractionPistachio.getPixelArea(this.toDoubleArray2D());
        return this;
    }

    /**
     * Matrix inversion
     *
     * @return
     */
    public CMatrix getInverse() {
        if (this.getRowNumber() != this.getColumnNumber()) {
            System.out.println("Only square matrix has inverse operation, otherwise try to calculate pseudoinverse ");
        }
        Matrix m = new Matrix(array);
        m = m.inverse();
        CMatrix ret = this.clone(this).setArray(m.getArray());
        ret.name = this.name + "|inverse";
        return ret;
    }

    /**
     * Matrix covariance
     *
     * @return covariance matrix
     */
    public CMatrix cov() {
        CMatrix ret = this.clone(this);

        ret = ret.setArray(FactoryMatrix.cov(ret.array));
        ret.name = this.name + "|covariance";
        return ret;
    }

    /**
     * Matlab compatible command: Matrix inversion
     *
     * @return CMatrix
     */
    public CMatrix inv() {
        return getInverse();
    }

    /**
     * Matlab compatible command: Matrix pseudo inversion
     *
     * @return CMatrix
     */
    public CMatrix pinv() {
        CMatrix ret = this.clone(this);

        ret = ret.setArray(FactoryMatrix.pinv(ret.array));
        return ret;
    }

    /**
     * Eigen Value Decomposition
     *
     * @return
     */
    public CMatrix getEigenValueDecompistion() {
        Matrix m = new Matrix(array);
        EigenvalueDecomposition eig = m.eig();
        m = eig.getD();
        CMatrix ret = this.clone(this).setArray(m.getArray());
        ret.name = this.name + "|eig";
        return ret;
    }

    /**
     * Matlab compatible command: Eigen Value Decomposition
     *
     * @return CMatrix
     */
    public CMatrix eig() {
        return getEigenValueDecompistion();
    }

    public CMatrix fromWekaMatrix(Matrix m) {
        CMatrix ret = this.clone(this);

        ret.setArray(m.getArray());
        return ret;
    }

    public Matrix toWekaMatrix() {
        return new Matrix(array);
    }

    public CMatrix deleteRow(int n) {
        ArrayList lst = this.toArrayList();
        lst.remove(n);
        return CMatrix.getInstance(lst);
    }

    public CMatrix deleteColumn(int n) {
        ArrayList lst = this.transpose().toArrayList();
        lst.remove(n);
        return CMatrix.getInstance(lst).transpose();
    }

    public CMatrix deleteRows(CMatrix m) {
        int[] p = m.toIntArray1D();
        ArrayList<double[]> lst = toArrayList();
        double[][] objList = new double[p.length][lst.get(0).length];
        for (int i = 0; i < p.length; i++) {
            objList[i] = lst.get(p[i]);
        }
        for (int i = 0; i < p.length; i++) {
            lst.remove(objList[i]);
        }
        CMatrix ret = fromArrayList(lst);
        ret.image = null;
        return ret;
    }

    public CMatrix deleteColumns(CMatrix m) {
        CMatrix ret = this.clone(this);
        int[] p = m.toIntArray1D();
        ArrayList<double[]> lst = this.clone(this).transpose().toArrayList();
        double[][] objList = new double[p.length][lst.get(0).length];
        for (int i = 0; i < p.length; i++) {
            objList[i] = lst.get(p[i]);
        }
        for (int i = 0; i < p.length; i++) {
            lst.remove(objList[i]);
        }
        ret = fromArrayList(lst).transpose();
        ret.image = null;
        return ret;
    }

    public double[] getRow(int i) {
        return FactoryMatrix.clone(array[i]);
    }

    public CMatrix getRowMatrix(int i) {
        return CMatrix.getInstance(FactoryMatrix.clone(array[i]));
    }

    public double[] getColumn(int i) {
        return FactoryMatrix.clone(transpose().array[i]);
    }

    public double[] getLastColumn() {
        return FactoryMatrix.clone(transpose().array[getColumnNumber() - 1]);
    }

    public CMatrix getColumnMatrix(int i) {
        return CMatrix.getInstance(FactoryMatrix.clone(transpose().array[i]));
    }

    /**
     * Sadece i. indexteki sutunun değerlerini parametre ile değiştirir, yeni
     * bir sütün eklemez
     *
     * @param n
     * @param p
     * @return
     */
    public CMatrix setColumn(int n, double[] p) {
        CMatrix ret = this.clone(this).transpose();
        for (int i = 0; i < p.length; i++) {
            ret.array[n][i] = p[i];
        }
        return ret.transpose();
    }

    /**
     * Sadece i. indexteki satırın değerlerini parametre ile değiştirir, yeni
     * bir satır eklemez
     *
     * @param i
     * @param p
     * @return
     */
    public CMatrix setRow(int i, double[] p) {
        CMatrix ret = this.clone(this);

        ret.array[i] = p;
        return ret;
    }

    public CMatrix setXY(int i, int j, double p) {
        CMatrix ret = this.clone(this);

        ret.array[i][j] = p;
        return ret;
    }

    /**
     * parametresiz çağrılırsa matrisin 0,0 elemanını geri gönderir
     *
     * @return double
     */
    public double getValue() {
        return array[0][0];
    }

    /**
     * matrisin row ve column koordinatındaki elemanını geri gönderir.
     *
     * @param row
     * @param column
     * @return double
     */
    public double getValue(int row, int column) {
        return array[row][column];
    }

    public CMatrix getAlphaChannelColor() {
        this.image = FactoryImageProcess.getAlphaChannelColor(image);
        this.array = FactoryImageProcess.imageToPixelsDouble(this.image);
        return this;
    }

    public CMatrix getRedChannelColor() {
        this.image = FactoryImageProcess.getRedChannelColor(image);
        this.array = FactoryImageProcess.imageToPixelsDouble(this.image);
        return this;
    }

    public CMatrix getGreenChannelColor() {
        this.image = FactoryImageProcess.getGreenChannelColor(image);
        this.array = FactoryImageProcess.imageToPixelsDouble(this.image);
        return this;
    }

    public CMatrix getBlueChannelColor() {
        this.image = FactoryImageProcess.getBlueChannelColor(image);
        this.array = FactoryImageProcess.imageToPixelsDouble(this.image);
        return this;
    }

    public CMatrix resetMatrix() {
//        this.name = name;
//        this.array = FactoryUtils.to2DArrayDouble(ImageProcess.imageToPixels255(image));
//        this.rgbImageArray = FactoryUtils.to3DArrayDouble(ImageProcess.imageToPixels(image));
//        this.image = image;
        CMatrix ret = this.clone(this);

        return ret;
    }

    public ArrayList<double[]> toArrayList() {
        CMatrix cm = this.clone(this);

        ArrayList<double[]> ret = new ArrayList<>();
        for (int i = 0; i < cm.getRowNumber(); i++) {
            ret.add(cm.array[i]);
        }
        return ret;
    }

    public CMatrix fromArrayList(ArrayList<double[]> lst) {
        CMatrix ret = new CMatrix(lst.size(), lst.get(0).length);
        for (int i = 0; i < lst.size(); i++) {
            ret.array[i] = lst.get(i);
        }
        return ret;
    }

    public CMatrix fromList(List lst) {
        CMatrix ret = new CMatrix(lst.toArray());
        return ret;
    }

    /**
     * add certain noise on the matrix elements
     *
     * @param range: how much noise
     * @param number : how many jitter noise points
     *
     * @return CMatrix
     */
    public CMatrix jitter(double range, int number) {
        CMatrix cm = this.clone(this);

        CMatrix ret = new CMatrix(number, cm.getColumnNumber());
        double[][] r = ret.toDoubleArray2D();
        for (int i = 0; i < number; i++) {
            for (int j = 0; j < cm.getColumnNumber(); j++) {
                double n = new Random().nextGaussian() * range;
                r[i][j] = cm.toDoubleArray2D()[0][j] + n;
            }
        }
        ret.setArray(r);
        ret.name = this.name + "|jitter";
        return ret;
    }

    /**
     * add certain noise on the matrix elements
     *
     * @param range: how much noise
     *
     * @return CMatrix
     */
    public CMatrix jitter(double range) {
        CMatrix ret = this.clone(this);

        double[][] r = ret.toDoubleArray2D();
        for (int i = 0; i < ret.getRowNumber(); i++) {
            for (int j = 0; j < ret.getColumnNumber(); j++) {
                double n = new Random().nextGaussian() * range;
                r[i][j] = ret.toDoubleArray2D()[i][j] + n;
            }
        }
        ret.setArray(r);
        ret.name = this.name + "|jitter";
        return ret;
    }

    /**
     * add certain noise on the matrix elements
     *
     * @param range: how much noise
     *
     * @return CMatrix
     */
    public CMatrix addNoise(double range) {
        return jitter(range);
    }

    /**
     * Row wise randomly re-arrangment of the matrix elements
     *
     * @return CMatrix
     */
    public CMatrix shuffleRows() {
        CMatrix ret = this.clone(this);

        ret.name = this.name + "|shuffleRows";
        int[] rows = ret.randPermInt(ret.getRowNumber());
        ret = ret.row(ret, rows);
        return ret;
    }

    /**
     * Row wise randomly re-arrangment of the matrix elements
     *
     * @return CMatrix
     */
    public CMatrix shuffleRowsWeka() {
        CMatrix ret = this.clone(this);

        ret.name = this.name + "|shuffleRowsWeka";
        ret.wekaInstance.randomize(new Random(1));
        return ret;
    }

    /**
     * Row wise randomly re-arrangment of the matrix elements
     *
     * @return CMatrix
     */
    public CMatrix shuffleRowsWeka(int seed) {
        CMatrix ret = this.clone(this);

        ret.name = this.name + "|shuffleRowsWeka";
        ret.wekaInstance.randomize(new Random(seed));
        return ret;
    }

    /**
     * Column wise randomly re-arrangment of the matrix elements
     *
     * @return CMatrix
     */
    public CMatrix shuffleColumns() {
        CMatrix ret = this.clone(this);

        ret.name = this.name + "|shuffleColumns";
        int[] cols = ret.randPermInt(ret.getColumnNumber());
        ret = ret.column(ret, cols);
        return ret;
    }

    /**
     * Matlab compatible command::read image file
     *
     * @return CMatrix
     */
    public CMatrix imread() {
        return readImage();
    }

    /**
     * Matlab compatible command::write image file
     *
     * @return CMatrix
     */
    public CMatrix imwrite() {
        return writeImage();
    }

    public CMatrix writeImage() {
        FactoryImageProcess.writeImage(image);
        return this;
    }

    /**
     * Matlab compatible command::write image file
     *
     * @return CMatrix
     */
    public CMatrix imwrite(String path) {
        return writeImage(path);
    }

    public CMatrix writeImage(String path) {
        FactoryImageProcess.writeImage(image, path);
        return this;
    }

    /**
     * Matlab compatible command:read image file from the provided path
     *
     * @param path:image file path
     *
     * @return CMatrix
     */
    public CMatrix imread(String path) {
        return readImage(path);
    }

    public CMatrix readImage() {
        File fl = FactoryImageProcess.readImage();
        BufferedImage bf = FactoryImageProcess.readImageFromFile(fl);
        if (bf != null) {
            this.image = bf;
//            this.array = FactoryUtils.toDoubleArray(ImageProcess.imageToPixels255(image));
            this.array = FactoryImageProcess.imageToPixelsDouble(GrayScale.luminosity(image));
            this.imagePath = fl.getAbsolutePath();
//            this.rgbImageArray = FactoryUtils.toTripleArray(ImageProcess.imageToPixels(image));
        }
        return this;
    }

    public CMatrix readImage(String path) {
        BufferedImage bf = FactoryImageProcess.readImageFromFile(path);
        if (bf != null) {
            Path p = Paths.get(path);
            String fileName = p.getFileName().toString();
            this.name += "|" + fileName;
            this.image = bf;
//            this.array = ImageProcess.imageToDoublePixels255(this.image);
            this.array = FactoryImageProcess.imageToPixelsDouble(GrayScale.luminosity(image));
            this.imagePath = path;
        }
        return this;
    }

    public CMatrix normalizeZScore() {
        CMatrix ret = this.clone(this);

        ret.setArray(FactoryNormalization.normalizeZScore(ret.toDoubleArray2D()));
        return ret;
    }

    /**
     * Matlab compatible command: normalize each columns by zscore normalization
     * technique
     *
     * @return CMatrix
     */
    public CMatrix zscore() {
        return normalizeZScore();
    }

    public CMatrix normalizeMinMax() {
        CMatrix ret = this.clone(this);

        ret.image = null;
        ret.setArray(FactoryNormalization.normalizeMinMax(ret.toDoubleArray2D()));
        return ret;
    }

    /**
     * Matlab compatible command: get minimum and maximum values of each rows
     *
     * @return CMatrix
     */
    public CMatrix minmax() {
        CMatrix ret = this.clone(this);

        ret.setArray(FactoryMatrix.getMinMax(ret.array));
        return ret;
    }

    public CMatrix normalizeWithRange(double min, double max) {
        CMatrix ret = this.clone(this);

        ret.image = null;
        ret.setArray(FactoryNormalization.normalizeWithRange(ret.toDoubleArray2D(), min, max));
        return ret;
    }

    public CMatrix normalizeWithRangeRows(double min, double max) {
        CMatrix ret = this.clone(this).transpose();
        ret.image = null;
        ret.setArray(FactoryNormalization.normalizeWithRange(ret.toDoubleArray2D(), min, max));
        return ret.transpose();
    }

    public CMatrix map(double min, double max) {
        return normalizeWithRange(min, max);
    }

    public CMatrix mapRows(double min, double max) {
        return normalizeWithRangeRows(min, max);
    }

    public CMatrix multiplyElement(CMatrix cm) {
        if (this.getRowNumber() != cm.getRowNumber() || this.getColumnNumber() != cm.getColumnNumber()) {
            System.err.println("Two Matrixes should be the same size");
            return this;
        }
        CMatrix ret = this.clone(this);

        ret.image = null;
        double[][] d1 = ret.array;
        double[][] d2 = cm.array;
        double[][] d3 = new double[getRowNumber()][getColumnNumber()];
        for (int i = 0; i < d1.length; i++) {
            for (int j = 0; j < d1[0].length; j++) {
                d3[i][j] = d1[i][j] * d2[i][j];
            }
        }
        ret.setArray(d3);
        return ret;

    }

    public CMatrix divideElement(CMatrix cm) {
        if (this.getRowNumber() != cm.getRowNumber() || this.getColumnNumber() != cm.getColumnNumber()) {
            System.err.println("Two Matrixes should be the same size");
            return this;
        }
        CMatrix ret = this.clone(this);

        ret.image = null;
        double[][] d1 = ret.array;
        double[][] d2 = cm.array;
        double[][] d3 = new double[getRowNumber()][getColumnNumber()];
        for (int i = 0; i < d1.length; i++) {
            for (int j = 0; j < d1[0].length; j++) {
                d3[i][j] = d1[i][j] / d2[i][j];
            }
        }
        ret.setArray(d3);
        return ret;
    }

    public CMatrix and(CMatrix cm) {
        if (this.getRowNumber() != cm.getRowNumber() || this.getColumnNumber() != cm.getColumnNumber()) {
            System.err.println("Two Matrixes should be the same size");
            return this;
        }
        CMatrix ret = this.clone(this);

        ret.image = null;
        double[][] d1 = ret.array;
        double[][] d2 = cm.array;
        double[][] d3 = new double[getRowNumber()][getColumnNumber()];
        for (int i = 0; i < d1.length; i++) {
            for (int j = 0; j < d1[0].length; j++) {
                d3[i][j] = (int) d1[i][j] & (int) d2[i][j];
            }
        }
        ret.setArray(d3);
        return ret;
    }

    public CMatrix or(CMatrix cm) {
        if (this.getRowNumber() != cm.getRowNumber() || this.getColumnNumber() != cm.getColumnNumber()) {
            System.err.println("Two Matrixes should be the same size");
            return this;
        }
        CMatrix ret = this.clone(this);

        ret.image = null;
        double[][] d1 = ret.array;
        double[][] d2 = cm.array;
        double[][] d3 = new double[getRowNumber()][getColumnNumber()];
        for (int i = 0; i < d1.length; i++) {
            for (int j = 0; j < d1[0].length; j++) {
                d3[i][j] = (int) d1[i][j] | (int) d2[i][j];
            }
        }
        ret.setArray(d3);
        return ret;
    }

    public CMatrix xor(CMatrix cm) {
        if (this.getRowNumber() != cm.getRowNumber() || this.getColumnNumber() != cm.getColumnNumber()) {
            System.err.println("Two Matrixes should be the same size");
            return this;
        }
        CMatrix ret = this.clone(this);

        ret.image = null;
        double[][] d1 = ret.array;
        double[][] d2 = cm.array;
        double[][] d3 = new double[getRowNumber()][getColumnNumber()];
        for (int i = 0; i < d1.length; i++) {
            for (int j = 0; j < d1[0].length; j++) {
                d3[i][j] = (int) d1[i][j] ^ (int) d2[i][j];
            }
        }
        ret.setArray(d3);
        return ret;
    }

    public CMatrix not() {
        CMatrix ret = this.clone(this);

        ret.image = null;
        double[][] d1 = ret.array;
        double[][] d3 = new double[getRowNumber()][getColumnNumber()];
        for (int i = 0; i < d1.length; i++) {
            for (int j = 0; j < d1[0].length; j++) {
                d3[i][j] = ~(int) d1[i][j];
            }
        }
        ret.setArray(d3);
        return ret;
    }

    /**
     * Matlab compatible command: transform matrix items 1,0,-1 if greater than
     * 0 and if equals 0 and if smaller than 0, respectively
     *
     * @param t : threshold
     *
     * @return CMatrix
     */
    public CMatrix sign() {
        return getSignum();
    }

    /**
     * Matlab compilant command: transform matrix items 1,0,-1 if greater than t
     * and if equals t and if smaller than t, respectively
     *
     * @param t : threshold
     *
     * @return CMatrix
     */
    public CMatrix sign(int t) {
        return getSignum(t);
    }

    /**
     * signum is a sign function which satisfies three conditions |-1 :x<0
     * signum(x)=| 0 :x=0
     *           |+1 :x>0
     *
     * @return
     */
    public CMatrix getSignum() {
        CMatrix ret = this.clone(this);

        ret.image = null;
        double[][] d = ret.array;
        double[][] d1 = new double[getRowNumber()][getColumnNumber()];
        for (int i = 0; i < d.length; i++) {
            for (int j = 0; j < d[0].length; j++) {
                d1[i][j] = (i == 0) ? 0 : (i > 0) ? 1 : -1;
            }
        }
        ret.setArray(d1);
        return ret;
    }

    /**
     * transform matrix items 1,0,-1 if greater than t and if equals t and if
     * smaller than t, respectively
     *
     * @param t : threshold
     *
     * @return CMatrix
     */
    public CMatrix getSignum(int t) {
        CMatrix ret = this.clone(this);

        ret.image = null;
        double[][] d = ret.array;
        double[][] d1 = new double[getRowNumber()][getColumnNumber()];
        for (int i = 0; i < d.length; i++) {
            for (int j = 0; j < d[0].length; j++) {
                d1[i][j] = (i > t) ? 1 : (i < t) ? -1 : 0;
            }
        }
        ret.setArray(d1);
        return ret;
    }

    /**
     * Basic Statistics Functions here
     *
     * @return
     */
    public double getInverseDiffMoment() {
        double IDF = 0.0d;
        for (int i = 0; i < getRowNumber(); i++) {
            for (int j = 0; j < getColumnNumber(); j++) {
                IDF += array[i][j] / (1 + (i - j) * (i - j));
            }
        }
        return IDF;
    }

    public CMatrix getContrast(int paramInt) {
        int i;
        int[] contrast = new int[256];
        if (paramInt < 0) {
            int j = 0;
            do {
                i = j > 127 ? 255 - j : j;
                i = (int) (127.0D * Math.pow((i > 0 ? i : 1) / 127.0D, (127 + paramInt) / 127.0D));
                if (i > 255) {
                    i = 255;
                } else if (i < 0) {
                    i = 0;
                }
                contrast[j] = (j > 127 ? 255 - i : i);
                j++;
            } while (j < 256);
        } else {
            int j = 0;
            do {
                i = j > 127 ? 255 - j : j;
                double d = (paramInt == 127) ? 127.0D : (127.0D / (127 - paramInt));
                i = (int) (127.0D * Math.pow(i / 127.0D, d));
                if (i > 255) {
                    i = 255;
                } else if (i < 0) {
                    i = 0;
                }
                contrast[j] = (j > 127 ? 255 - i : i);
                j++;
            } while (j < 256);
        }
        CMatrix ret = this.clone(this);

        ret.setArray(contrast);
        return ret;
    }

    /**
     * As far as we know contrast means dynamic range of the image here dynamic
     * range represents absolute difference value of max and min values
     *
     * @return
     */
    public double getContrast() {
        double contrast = 0.0d;
        double[] hist = getImageHistogramData().toDoubleArray1D();
        double max = 0;
        double min = 0;
        for (int i = 0; i < hist.length; i++) {
            if (hist[i] > 0) {
                min = i;
                break;
            }
        }
        for (int i = hist.length - 1; i > 0; i--) {
            if (hist[i] > 0) {
                max = i;
                break;
            }
        }
        contrast = Math.abs(max - min);
        return contrast;
    }

    /**
     * Matlab compatible command: calculate contrast value
     *
     * @return
     */
    public CMatrix contrast() {
        CMatrix ret = this.clone(this);

        ret.returnedValue.str = "" + getContrast();
        return ret;
    }

    /**
     * Matlab compatible command: calculate contrast value
     *
     * @param k : threshold value
     *
     * @return CMatrix
     */
    public CMatrix contrast(int k) {
        return getContrast(k);
    }

    /**
     * Matlab compatible command: calculate entropy value
     *
     * @return CMatrix
     */
    public CMatrix entropy() {
        CMatrix ret = this.clone(this);

        ret.returnedValue.str = "" + getEntropy();
        return ret;
    }

    public double getEntropy() {
        double entropy = 0.0d;
        double[] pdfArray = getPDFData().toDoubleArray1D();
        for (int i = 0; i < pdfArray.length; i++) {
            if (pdfArray[i] >= 0 && pdfArray[i] <= 0.000001) {
                continue;
            }
            entropy += pdfArray[i] * Math.log(pdfArray[i]);
        }
        entropy = -entropy;
        return entropy;
    }

    public double getEnergy() {
        double energy = 0.0d;
        for (int i = 0; i < getRowNumber(); i++) {
            for (int j = 0; j < getColumnNumber(); j++) {
                energy += array[i][j] * array[i][j];
            }
        }
        return energy;
    }

    public double getKurtosis() {
        int[] nums = toIntArray1D();
        int n = nums.length;
        double mean = FactoryUtils.getMean(nums);
        double deviation = 0.0d;
        double variance = 0.0d;
        double k = 0.0d;

        for (int i = 0; i < n; i++) {
            deviation = nums[i] - mean;
            variance += Math.pow(deviation, 2);
            k += Math.pow(deviation, 4);
        }
        //variance /= (n - 1);
        variance = variance / n;
        if (variance != 0.0) {
            //k = k / (n * variance * variance) - 3.0;
            k = k / (n * variance * variance);
        }
        return k;
    }

    public CMatrix getHistogram() {
        int[] d = this.toIntArray1D();
        int[] ret = FactoryImageProcess.getHistogram(d);
        CMatrix cm = CMatrix.getInstance(ret);

        return cm;
    }

    public double getSkewness() {
        int[] nums = toIntArray1D();
        int n = nums.length;
        double mean = FactoryUtils.getMean(nums);
        double deviation = 0.0d;
        double variance = 0.0d;
        double skew = 0.0d;

        for (int i = 0; i < n; i++) {
            deviation = nums[i] - mean;
            variance += Math.pow(deviation, 2);
            skew += Math.pow(deviation, 3);
        }
        //variance /= (n - 1);
        variance /= n;
        double standard_deviation = Math.sqrt(variance);
        if (variance != 0.0) {
            skew /= (n * variance * standard_deviation);
        }
        return skew;
    }

    public double getAdaptiveExposureScore() {
        double d = getAdaptiveExposureMatrix().sumTotal();
//        if (d >= 0) {
//            d = Math.pow(d, 1.0 / 16);
//        } else {
//            d = -Math.pow(Math.abs(d), 1.0 / 16);
//        }
//        return d + 8;
        return d;
    }

//    public CMatrix getAdaptiveExposureMatrix() {
//        int[] hist = ImageProcess.getHistogram(this.image);
//        CMatrix y = CMatrix.getInstance().vector(0, 255).minusScalar(127).pow(2);
//        CMatrix pdf = CMatrix.getInstance(this.image).getPDFData();
//        CMatrix target = y.multiplyElement(pdf).multiplyElement(y.signum(127)).scale(1.0 / (this.image.getWidth() * this.image.getHeight() / 300));
//        return target;
//    }
    /**
     * adaptive exposure score un çalışma mantığı şu şekilde özetlenebilir
     * hiperspektral görüntülerde veya diğer görüntülerde uç değerler mesela 0
     * ve 255 parlaklık değerleri under expose ve over expose sınırı olduğundan,
     * en uç değerlere en fazla ceza verecek ve ortaya yani 127 griye geldiğinde
     * ise ceza seviyesi çok radikal bir şekilde düşecek bir higher order
     * non-linear bir fonksiyon ile çarpmak veya convolution almak gerekiyor.
     * Hiperspketral görüntüler genellikle hiç bir zaman o değerinden
     * başlamadığı için total hesaplandıktan sonra bir eşik değeri ile sağa
     * doğru shift edilmiştir. Diğer görüntüler için bu doğru olmayabilir.
     *
     * @return
     */
    public CMatrix getAdaptiveExposureMatrix() {
        int n = 24;
        CMatrix y1 = CMatrix.getInstance().vector(0, 127).minusScalar(127).pow(n);
        CMatrix y2 = CMatrix.getInstance().vector(128, 255).minusScalar(128).pow(n);
        CMatrix y = y1.cat(2, y2).normalizeMinMax();

//        CMatrix y = CMatrix.getInstance().vector(0, 255).minusScalar(127).pow(8).normalizeMinMax().plot();
        CMatrix pdf = CMatrix.getInstance(this.image).getPDFData();
        CMatrix target = y.multiplyElement(pdf).multiplyElement(y.sign(127));//.plot();//.scale(1.0 / (this.image.getWidth() * this.image.getHeight() / 300));
        return target;
    }

    /**
     * Matlab compatible command: add original to cmx
     *
     * @param cmx : added matrix
     *
     * @return CMatrix
     */
    public CMatrix add(CMatrix cmx) {
        CMatrix ret = this.clone(this);

        for (int i = 0; i < this.getRowNumber(); i++) {
            for (int j = 0; j < this.getColumnNumber(); j++) {
                ret.array[i][j] = this.array[i][j] + cmx.array[i][j];
            }
        }
        return ret;
    }

    /**
     * Matlab compatible command: Subtract cmx from original matrix
     *
     * @param cmx : subtracted matrix
     *
     * @return CMatrix
     */
    public CMatrix minus(CMatrix cmx) {
        CMatrix ret = this.clone(this);

        ret.array = FactoryUtils.subtract(ret.array, cmx.array);
        return ret;
    }

    public CMatrix difference(CMatrix cmx) {
        CMatrix ret = this.clone(this);

        ret.array = FactoryUtils.subtract(ret.array, cmx.array);
        return ret;
    }

    public CMatrix absDifference(CMatrix cmx) {
        CMatrix ret = this.clone(this);

        ret.array = FactoryMatrix.absDifference(ret.array, cmx.array);
        return ret;
    }

    public CMatrix filterMedian(int window_size) {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.filterMedian(ret.image, window_size);
        ret.array = FactoryImageProcess.imageToPixelsDouble(ret.image);
        return ret;
    }

    /**
     * Matlab compliant median filter default window size is 3x3
     *
     * @return
     */
    public CMatrix medfilt2() {
        return medfilt2(3);
    }

    /**
     * Matlab compliant median filter with a given window size for 2D image
     * matrix
     *
     * @return
     */
    public CMatrix medfilt2(int window_size) {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.filterMedian(ret.image, window_size);
        ret.array = FactoryImageProcess.imageToPixelsDouble(ret.image);
        return ret;
    }

    /**
     * Matlab compatible median filter default window size is 3x3
     *
     * @return
     */
    public CMatrix meanfilt1() {
        return meanfilt1(3);
    }

    /**
     * Matlab compatible median filter with a given window size for 2D image
     * matrix
     *
     * @param window_size: size of the used kernel or window
     * @return
     */
    public CMatrix meanfilt1(int window_size) {
        return filterMean1D(window_size);
    }

    /**
     * apply mean filter
     *
     * @param window_size
     * @return
     */
    public CMatrix filterMean1D(int window_size) {
        CMatrix ret = this.clone(this);

        double[] d = FactoryMatrix.filterMean1D(ret.toDoubleArray1D(), window_size);
        ret.setArray(d);
        return ret;
    }

    /**
     * Matlab compatible median filter default window size is 3x3
     *
     * @return
     */
    public CMatrix medfilt1() {
        return medfilt1(3);
    }

    /**
     * Matlab compatible median filter with a given window size for 2D image
     * matrix
     *
     * @param window_size: size of the used kernel or window
     * @return
     */
    public CMatrix medfilt1(int window_size) {
        return filterMedian1D(window_size);
    }

    public CMatrix filterMedian1D(int window_size) {
        CMatrix ret = this.clone(this);

        double[] d = FactoryMatrix.filterMedian1D(ret.toDoubleArray1D(), window_size);
        ret.setArray(d);
        return ret;
    }

    public CMatrix filterGaussian(int window_size) {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.filterGaussian(ret.image, window_size);
        ret.array = FactoryImageProcess.imageToPixelsDouble(ret.image);
        return ret;
    }

    public CMatrix filterMembershipFunction(CMatrix cm) {
        CMatrix ret = this.clone(this);

        double[][] d = FactoryMatrix.filterMembershipFunction(ret.array, cm.toDoubleArray1D());
        ret.array = d;
        return ret;
    }

    /**
     * apply mean filter
     *
     * @param window_size
     * @return
     */
    public CMatrix filterMean(int window_size) {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.filterMean(ret.image, window_size);
        ret.array = FactoryImageProcess.imageToPixelsDouble(ret.image);

//        int n = (int) Math.floor(window_size / 2);
//        for (int i = 0; i < ret.getColumnNumber(); i++) {
//            for (int j = n; j < ret.getRowNumber() - n; j++) {
//                double t = 0;
//                for (int k = j - n; k < j - n + window_size; k++) {
//                    t += this.array[k][i];
//                }
//                ret.array[j][i] = t / window_size;
//            }
//        }
        return ret;
    }

    /**
     * Matlab compatible mean filter or average filter for 2D image matrix with
     * a given size of window
     *
     * @param window_size
     * @return
     */
    public CMatrix filter2(int window_size) {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.filterMean(ret.image, window_size);
        ret.array = FactoryImageProcess.imageToPixelsDouble(ret.image);
        return ret;
    }

    /**
     * Matlab compliant mean filter or average filter for 2D image matrix
     *
     * @param window_size
     * @return
     */
    public CMatrix filter2() {
        return filter2(3);
    }

    /**
     * column wised number of peaks in the matrix signals
     *
     * @return CMatrix
     */
    public CMatrix getNumberOfPeaks() {
        CMatrix ret = this.clone(this);

        //List<Map<Integer, Double>> lst = FactoryPeakDetector.getPeaks(returnedValue.array[0], d);
        double[] peaks = FactoryUtils.getNumberOfPeaks(ret.array);
        ret = new CMatrix(peaks);
        return ret.transpose();
    }

    /**
     * column wised number of peaks in the matrix signals
     *
     * @return
     */
    public CMatrix getAverageNumberOfPeaks() {
        CMatrix ret = this.clone(this);

        int length = ret.array.length;
        //List<Map<Integer, Double>> lst = FactoryPeakDetector.getPeaks(returnedValue.array[0], d);
        double[] peaks = FactoryUtils.getNumberOfPeaks(ret.array);
        for (int i = 0; i < peaks.length; i++) {
            peaks[i] = peaks[i] / length;
        }
        ret = new CMatrix(peaks);
        return ret.transpose();
    }

    public CMatrix getAverageTotalMovement() {
        CMatrix ret = this.clone(this);

        int length = ret.array.length;
        double[] movs = FactoryUtils.getTotalMovement(ret.array);
        for (int i = 0; i < movs.length; i++) {
            movs[i] = movs[i] / length;
        }
        ret = new CMatrix(movs);
        return ret.transpose();
    }

    /**
     * Matlab compatible command: calculate C(n,k) value
     *
     * @param n : size of the superset
     * @param k : size of the subset
     * @return CMatrix
     */
    public CMatrix nchoosek(int n, int k) {
        CMatrix ret = this.clone(this);

        if (n < k) {
            System.out.println("for combination calculation first parameter should greater thand second one");
            ret.returnedValue.str = -1 + "";
        }

        ret.returnedValue.str = "" + (int) (FactoryUtils.fact(n) / (FactoryUtils.fact(n - k) * FactoryUtils.fact(k)));
        return ret;
    }

    /**
     * return the biggest size of the dimension in the matrix
     *
     * @return
     */
    public int getMaxDimSize() {
        int max = this.getColumnNumber();
        if (this.getRowNumber() > max) {
            return this.getRowNumber();
        }
        return max;
    }

    /**
     * return the biggest size of the dimension in the matrix
     *
     * @return
     */
    public int maxsize() {
        return getMaxDimSize();
    }

    /**
     * return the biggest size of the dimension in matrix parameter cm
     *
     * @param cm : CMatrix
     * @return biggest dimension size
     */
    public int getMaxDimSize(CMatrix cm) {
        int max = cm.getColumnNumber();
        if (cm.getRowNumber() > max) {
            return cm.getRowNumber();
        }
        return max;
    }

    /**
     * return the biggest size of the dimension in matrix parameter cm
     *
     * @param cm : CMatrix
     * @return biggest dimension size
     */
    public int maxsize(CMatrix cm) {
        return getMaxDimSize(cm);
    }

//    
//    public CMatrix allcomb(int n){
//        
//    }
    /**
     * Matlab compatible command:
     *
     * Matlabdaki cat yani concatenate ile benzemektedir ayrıca merge metodunun
     * birebir aynısıdır matlab uyumluluğu için eklenmiştir.
     *
     * Farkı şudur Matlabdaki cat fonksiyonu, dim paramtresinden sonra iki adet
     * matris alır bunları ekler eğer dim 1 ise horzcat, 2 ise vertcat
     * fonksiyonlarının işini görür veya dim 1 ise [A B] yapar 2 ise [A;B] yapar
     *
     * OCL de ise cat sadece bir matrise ihtiyaç duyar, çünkü this de zaten
     * birinci matris vardır
     *
     * @param dim 1=yatay ekleme; 2=dikey ekleme
     * @param cm eklemek istenilen matris sona eklenir(note that matrix
     * dimension should be appropriate along with the dimension) i.e. if
     * dimension is set to 1 means that horizontal concetanation is desired, so
     * matrix number of rows should be identical to eachother. And vice versa.
     *
     * @return CMatrix
     */
    public CMatrix cat(int dim, CMatrix cm) {
        CMatrix ret = this.clone(this);

        if (dim == 1) {
            if (ret.getRowNumber() != cm.getRowNumber()) {
                System.out.println("Matrix first dimension (number of rows) should be the same as the base matrix");

                return ret;
            }
            ret = ret.transpose();
            cm = cm.transpose();
            ArrayList<double[]> lst = new ArrayList<>();
            for (int i = 0; i < ret.getRowNumber(); i++) {
                lst.add(ret.array[i]);
            }
            for (int i = 0; i < cm.getRowNumber(); i++) {
                lst.add(cm.array[i]);
            }
            double[][] d = new double[lst.size()][ret.getColumnNumber()];
            for (int i = 0; i < lst.size(); i++) {
                d[i] = lst.get(i);
            }
            CMatrix r = CMatrix.getInstance(d).transpose();
            return r;
        }
        if (dim == 2) {
            if (ret.getColumnNumber() != cm.getColumnNumber()) {
                System.out.println("Matrix second dimension (number of columns) should be the same as the base matrix");

                return ret;
            }
            ArrayList<double[]> lst = new ArrayList<>();
            for (int i = 0; i < ret.getRowNumber(); i++) {
                lst.add(ret.array[i]);
            }
            for (int i = 0; i < cm.getRowNumber(); i++) {
                lst.add(cm.array[i]);
            }
            double[][] d = new double[lst.size()][ret.getColumnNumber()];
            for (int i = 0; i < lst.size(); i++) {
                d[i] = lst.get(i);
            }
            CMatrix r = CMatrix.getInstance(d);
            return r;
        }

        return ret;
    }

    /**
     * Matlab Compatibility
     *
     *
     * Eklenecek matrisi başa alıp ekler normal cat ise sona ekler Matlabdaki
     * cat yani concatenate fonksiyonuna banzer farkı şudur Matlabdaki cat
     * fonksiyonu, dim paramtresinden sonra iki adet matris alır bunları ekler
     * eğer dim 1 ise horzcat, 2 ise vertcat fonksiyonlarının işini görür veya
     * dim 1 ise [A B] yapar 2 ise [A;B] yapar OCL de ise cat sadece bir matrise
     * ihtiyaç duyar, çünkü this de zaten birinci matris vardır.
     *
     * @param dim :1=horizontal ; 2=vertical
     * @param cm :matrix that is desired to concatenate tries to concatenate at
     * the begining of the original matrix (note that matrix dimension should be
     * appropriate along with the dimension) i.e. if dimension is set to 1 means
     * that horizontal concetanation is desired, so matrix number of rows should
     * be identical to eachother. And vice versa.
     *
     * @return CMatrix
     */
    public CMatrix catFirst(int dim, CMatrix cm) {
        CMatrix ret = this.clone(this);

        if (dim == 1) {
            if (ret.getRowNumber() != cm.getRowNumber()) {
                System.out.println("Matrix first dimension (number of rows) should be the same as the base matrix");

                return ret;
            }
            ret = ret.transpose();
            cm = cm.transpose();
            ArrayList<double[]> lst = new ArrayList<>();
            for (int i = 0; i < cm.getRowNumber(); i++) {
                lst.add(cm.array[i]);
            }
            for (int i = 0; i < ret.getRowNumber(); i++) {
                lst.add(ret.array[i]);
            }
            double[][] d = new double[lst.size()][ret.getColumnNumber()];
            for (int i = 0; i < lst.size(); i++) {
                d[i] = lst.get(i);
            }
            CMatrix r = CMatrix.getInstance(d).transpose();
            return r;
        }
        if (dim == 2) {
            if (ret.getColumnNumber() != cm.getColumnNumber()) {
                System.out.println("Matrix second dimension (number of columns) should be the same as the base matrix");

                return ret;
            }
            ArrayList<double[]> lst = new ArrayList<>();
            for (int i = 0; i < cm.getRowNumber(); i++) {
                lst.add(cm.array[i]);
            }
            for (int i = 0; i < ret.getRowNumber(); i++) {
                lst.add(ret.array[i]);
            }
            double[][] d = new double[lst.size()][ret.getColumnNumber()];
            for (int i = 0; i < lst.size(); i++) {
                d[i] = lst.get(i);
            }
            CMatrix r = CMatrix.getInstance(d);
            return r;
        }

        return ret;
    }

    /**
     * Matlab compatible command: for Matlab Compatibility initialize timer
     * (System.nanoTime() is called for perfect calculation of elapsed time)
     *
     * @return CMatrix
     */
    public CMatrix tic() {
        currentTime = System.nanoTime();
        return this;
    }

    /**
     * Matlab compatible command: for Matlab Compatibility print elapsed time
     * from tic() to toc() in second (System.nanoTime() is called for perfect
     * calculation of elapsed time)
     *
     * @return CMatrix
     */
    public CMatrix toc() {
        long t2 = System.nanoTime();
        double elapsed = (t2 - currentTime) / 1000000000.0;
        System.out.println("Elapsed Time:" + elapsed + " sec");
        currentTime = System.nanoTime();
        return this;
    }

    public CMatrix toc(String msg) {
        long t2 = System.nanoTime();
        double elapsed = (t2 - currentTime) / 1000000.0;
        System.out.println(msg + " Elapsed Time:" + elapsed + " miliSecond");
        currentTime = System.nanoTime();
        return this;
    }

    /**
     * Matlab compatible command: compute gauss (normal) membership function for
     * a given mean and standart deviation values
     *
     * @param sigma : standart deviation value
     * @param mean : Mean value
     * @return CMatrix
     */
    public CMatrix gaussmf(double sigma, double mean) {
        CMatrix ret = this.clone(this);

        ret = ret.transpose();
        for (int i = 0; i < ret.getRowNumber(); i++) {
            ret.array[i] = FactoryUtils.gaussian(ret.array[i], sigma, mean);
        }
        return ret.transpose();
    }

    /**
     * Matlab compatible command:Resize the matrix to desired width and height
     * values w:width h:height
     *
     * @param w : width
     * @param h : height
     * @return CMatrix
     */
    public CMatrix imresize(int w, int h) {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.resize(image, w, h);
        ret.array = FactoryImageProcess.imageToPixelsDouble(ret.image);

        return ret;
    }

    public CMatrix imresizeSmooth(int w, int h) {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.resizeSmooth(image, w, h);
        ret.array = FactoryImageProcess.imageToPixelsDouble(ret.image);

        return ret;
    }

    public CMatrix imresize(CSize c) {
        return imresize(c.width, c.height);
    }

    /**
     * resize image with ratio. ie. if ratio is 0.5 it scales image to half size
     * if ratio is 2 it scales image to double size
     *
     * @param ratio
     * @return
     */
    public CMatrix imresize(double ratio) {
        int w = (int) (this.getColumnNumber() * ratio);
        int h = (int) (this.getRowNumber() * ratio);
        return imresize(w, h);
    }

    public CMatrix imblend(CMatrix cm, double alpha) {
        return overlay(cm, alpha);
    }

    public CMatrix imblend(CMatrix cm, CPoint cp) {
        return overlay(cm, cp);
    }

    public CMatrix imblend(CMatrix cm, CPoint cp, double alpha) {
        return overlay(cm, cp);
    }

    /**
     * Matlab compatible command:Resize the matrix to desired width and height
     * values
     *
     * @param w:width
     * @param h:height
     * @return CMatrix
     */
    public CMatrix resize(int w, int h) {
        return imresize(w, h);
    }

    public CMatrix resize(CSize c) {
        return imresize(c.width, c.height);
    }

    /**
     * Matlab compatible command: rotate image with desired theta angle
     *
     * @param theta
     * @return CMatrix
     */
    public CMatrix imrotate(double theta) {
        CMatrix ret = this.clone(this);

        if (ret.image == null) {
            ret.image = FactoryImageProcess.pixelsToImageGray(ret.array);
        }
        ret.image = FactoryImageProcess.rotateImage(ret.image, theta);
        ret.array = FactoryImageProcess.imageToPixelsDouble(ret.image);

        return ret;
    }

    /**
     * Matlab compatible command: rotate image around CPoint with desired theta
     * angle theta is not a radian type
     *
     * @param theta
     * @return CMatrix
     */
    public CMatrix imrotate(CPoint cp, double theta) {
        CMatrix ret = this.clone(this);

        if (ret.image == null) {
            ret.image = FactoryImageProcess.pixelsToImageGray(ret.array);
        }
        ret.image = FactoryImageProcess.rotateImage(ret.image, cp, theta);
        ret.array = FactoryImageProcess.imageToPixelsDouble(ret.image);

        return ret;
    }

    /**
     * Extract ring projection features (size:width/2) prerequisites: image
     * should be square stepSize=1 by default
     *
     * @return 1 dimensional ring projection data with the length of
     * imagewidth/2
     */
    public CMatrix extractFeatureRingProjection() {
        return extractFeatureRingProjection(1);
    }

    /**
     * Extract ring projection features (size:width/2) prerequisites: image
     * should be square
     *
     * @param stepSize
     * @return 1 dimensional ring projection data
     */
    public CMatrix extractFeatureRingProjection(int stepSize) {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.pixelsToImageGray(FactoryUtils.toIntArray2D(ret.array));
        ret.array = FactoryImageProcess.imageToPixelsDouble(ret.image);
        double[] d = FeatureExtractionRingProjection.getRingProjection(ret.array, stepSize);
        double[][] m = new double[1][d.length];
        m[0] = d;
        ret.array = m;
        return ret.transpose();
    }

    public CMatrix extractFeatureLBP2D(boolean isRegular) {
        CMatrix ret = this.clone(this);

        int[] d = FeatureExtractionLBP.getLBP(FactoryUtils.toIntArray2D(ret.array), isRegular);
        ret.array = new CMatrix(d).array;

        return ret;
    }

    public CMatrix extractFeatureLBP1D(int N, boolean isRegular) {
        CMatrix ret = this.clone(this);

        int[] d = FeatureExtractionLBP.getLBP(ret.toDoubleArray1D(), N, isRegular);
        ret = new CMatrix(d);

        return ret;
    }

    public CMatrix readFile(String path) {
        CMatrix ret = this.clone(this);

        double[][] d = FactoryUtils.readFromFile(path, ",");
        ret.array = d;
        ret.image = FactoryImageProcess.pixelsToImageGray(d);

        return ret;
    }

    public CMatrix readFile(String path, String token) {
        CMatrix ret = this.clone(this);

        double[][] d = FactoryUtils.readFromFile(path, token);
        ret.array = d;
        ret.image = FactoryImageProcess.pixelsToImageGray(d);

        return ret;
    }

    /**
     * Matlab compatible command: read txt file which contains comma seperated
     * double matrix
     *
     * @param path:file path
     * @return CMatrix
     */
    public CMatrix importdata(String path) {
        CMatrix ret = this.clone(this);

        double[][] d = FactoryUtils.readFromFile(path, ",");
        ret.array = d;
        ret.image = FactoryImageProcess.pixelsToImageGray(d);

        return ret;
    }

    /**
     * Matlab compatible command: read txt file which contains token seperated
     * double matrix
     *
     * @param path:file path
     * @param token: it can be space, comma or semicolon or any arbitrary string
     * value for separation
     * @return CMatrix
     */
    public CMatrix importdata(String path, String token) {
        CMatrix ret = this.clone(this);

        double[][] d = FactoryUtils.readFromFile(path, token);
        ret.array = d;
        ret.image = FactoryImageProcess.pixelsToImageGray(d);

        return ret;
    }

    /**
     * perform Canny Edge Detection operator recommended parameters 0.3f, 1.0f,
     * 2.5f, 3, false
     *
     * @param img
     * @param lowThreshold
     * @param highThreshold
     * @param gaussianKernelRadious
     * @param guassianKernelWidth
     * @param isContrastNormalized
     * @return
     */
    public CMatrix detectEdgeCanny(
            float lowThreshold,
            float highThreshold,
            float gaussianKernelRadious,
            int guassianKernelWidth,
            boolean isContrastNormalized) {

        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.pixelsToImageGray(FactoryImageProcess.imageToPixelsDouble(FactoryImageProcess.edgeDetectionCanny(ret.image, lowThreshold, highThreshold, gaussianKernelRadious, guassianKernelWidth, isContrastNormalized)));
        ret.array = FactoryImageProcess.imageToPixelsDouble(ret.image);

        return ret;
    }

//    /**
//     * perform Canny Edge Detection operator recommended parameters 0.3f, 1.0f,
//     * 2.5f, 3, false
//     *
//     * @return
//     */
//    public CMatrix detectEdgeCanny() {
//        CMatrix returnedValue = this.clone(this); lastCM=ret; 
//        returnedValue.image = ImageProcess.pixelsToBufferedImage255(ImageProcess.imageToPixels255Double(ImageProcess.edgeDetectionCanny(returnedValue.image, 0.3f, 1.0f, 2.5f, 3, false)));
//        returnedValue.array = ImageProcess.imageToPixels255Double(returnedValue.image);
//        return returnedValue;
//    }
//
    /**
     * perform Soble Edge Detection operator
     *
     *
     * @return
     */
    public CMatrix edgeDetectionSobel(int thr) {
        CMatrix ret = this.clone(this);

//        SobelEdgeDetector sob = new SobelEdgeDetector(ImageProcess.imageToPixels255Double(returnedValue.image));
        SobelEdgeDetector sob = new SobelEdgeDetector(ret.array);
        ret.array = sob.process(thr);
        ret.image = FactoryImageProcess.pixelsToImageGray(ret.array);

        return ret;
    }

    /**
     * perform Canny Edge Detection operator recommended parameters 0.3f, 1.0f,
     * 2.5f, 3, false
     *
     * @return
     */
    public CMatrix edgeDetectionCanny() {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.pixelsToImageGray(FactoryImageProcess.imageToPixelsDouble(FactoryImageProcess.edgeDetectionCanny(ret.image, 0.3f, 1.0f, 2.5f, 3, false)));
        ret.array = FactoryImageProcess.imageToPixelsDouble(ret.image);

        return ret;
    }

    /**
     * perform Musa Edge Detection operator recommended parameters
     *
     * @param thr:threshold value
     * @return
     */
    public CMatrix edgeDetectionMusa(int thr) {
        CMatrix ret = this.clone(this);

        ret.array = FactoryImageProcess.edgeDetectionMusa(array, thr);
        ret.image = FactoryImageProcess.pixelsToImageGray(ret.array);

        return ret;
    }

    /**
     * binarize image based on otsu method
     *
     * @return
     */
    public CMatrix binarizeOtsu() {
        CMatrix ret = this.clone(this);

        int thr = FactoryImageProcess.getOtsuTresholdValue(ret.image);
//        System.out.println("otsu threshold:"+thr);
        ret.image = FactoryImageProcess.binarizeGrayScaleImage(ret.array, thr);
        ret.array = FactoryImageProcess.imageToPixelsDouble(ret.image);

        return ret;
    }

    /**
     * draw a specified color line onto image from point1 to point 2
     *
     * @param r1
     * @param c1
     * @param r2
     * @param c2
     * @param color
     * @return
     */
    public CMatrix drawLine(int r1, int c1, int r2, int c2, int th, Color color) {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.drawLine(ret.image, r1, c1, r2, c2, th, color);

        return ret;
    }

    /**
     * draw a text string with the specified color onto image use imshow to
     * visualize
     *
     * @param msg
     * @param r
     * @param c
     * @param angle : should be Math.Pi unit
     * @param color
     * @return
     */
    public CMatrix drawString(String msg, int r, int c, double angle, Color color) {
        CMatrix ret = this.clone(this);

        Graphics2D g2d = (Graphics2D) ret.image.getGraphics();
        g2d.setColor(color);
        g2d.drawString(msg, c, r);
//        AffineTransform orig = g2d.getTransform();
//        g2d.rotate(angle);
//        g2d.drawString(msg, c, r);
//        g2d.setTransform(orig);

        return ret;
    }

//    /**
//     * draw a specified color line onto image from point1 to point 2 use imshow
//     * to visualize
//     *
//     * @param p1
//     * @param p2
//     * @param color
//     * @return
//     */
//    public CMatrix drawLine(CPoint p1, CPoint p2,int th, Color color) {
//        return drawLine(p1.row, p1.column, p2.row, p2.column,th, color);
//    }
    /**
     * draw a specified color rectangle onto image from point1 to point 2 use
     * imshow to visualize
     *
     * @param r:row
     * @param c:column
     * @param w:width
     * @param h:height
     * @param color:Color.RED i.e.
     * @return
     */
    public CMatrix drawRect(int r, int c, int w, int h, int thickness, Color color) {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.drawRectangle(ret.image, r, c, w, h, thickness, color);

        return ret;
    }

    /**
     * draw a specified color round rectangle onto image from point1 to point 2
     * use imshow to visualize
     *
     * @param r:row
     * @param c:column
     * @param w:width
     * @param h:height
     * @param color:Color.RED i.e.
     * @return
     */
    public CMatrix drawRoundRect(int r, int c, int w, int h, int aw, int ah, int thickness, Color color) {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.drawRoundRectangle(ret.image, r, c, w, h, aw, ah, thickness, color);

        return ret;
    }

    /**
     * fill a specified color round rectangle onto image from point1 to point 2
     * use imshow to visualize
     *
     * @param r:row
     * @param c:column
     * @param w:width
     * @param h:height
     * @param color:Color.RED i.e.
     * @return
     */
    public CMatrix fillRoundRect(int r, int c, int w, int h, int aw, int ah, Color color) {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.fillRoundRectangle(ret.image, r, c, w, h, aw, ah, color);

        return ret;
    }

    /**
     * draw a specified color round rectangle onto image from point1 to point 2
     * use imshow to visualize
     *
     * @param r:row
     * @param c:column
     * @param w:width
     * @param h:height
     * @param color:Color.RED i.e.
     * @return
     */
    public CMatrix draw3DRect(int r, int c, int w, int h, int aw, int ah, int thickness, Color color) {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.draw3DRectangle(ret.image, r, c, w, h, thickness, color);

        return ret;
    }

    /**
     * fill a specified color round rectangle onto image from point1 to point 2
     * use imshow to visualize
     *
     * @param r:row
     * @param c:column
     * @param w:width
     * @param h:height
     * @param color:Color.RED i.e.
     * @return
     */
    public CMatrix fill3DRect(int r, int c, int w, int h, int aw, int ah, Color color) {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.fill3DRectangle(ret.image, r, c, w, h, color);

        return ret;
    }

    /**
     * draw a specified color polygon onto image use imshow to visualize
     *
     * @param r:row
     * @param c:column
     * @param w:width
     * @param h:height
     * @param color:Color.RED i.e.
     * @return
     */
    public CMatrix drawPolygon(Polygon p, int thickness, Color color) {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.drawPolygon(ret.image, p, thickness, color);

        return ret;
    }

    /**
     * fill a specified color round rectangle onto image from point1 to point 2
     * use imshow to visualize
     *
     * @param r:row
     * @param c:column
     * @param w:width
     * @param h:height
     * @param color:Color.RED i.e.
     * @return
     */
    public CMatrix fillPolygon(Polygon p, Color color) {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.fillPolygon(ret.image, p, color);

        return ret;
    }

    /**
     * draw a specified color shape use imshow to visualize
     *
     * @param r:row
     * @param c:column
     * @param w:width
     * @param h:height
     * @param color:Color.RED i.e.
     * @return
     */
    public CMatrix drawShape(Shape sh, int thickness, Color color) {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.drawShape(ret.image, sh, thickness, color);

        return ret;
    }

    /**
     * fill a specified color shape use imshow to visualize
     *
     * @param r:row
     * @param c:column
     * @param w:width
     * @param h:height
     * @param color:Color.RED i.e.
     * @return
     */
    public CMatrix fillShape(Shape sh, Color color) {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.fillShape(ret.image, sh, color);

        return ret;
    }

    /**
     * draw a specified color arc use imshow to visualize
     *
     * @param r:row
     * @param c:column
     * @param w:width
     * @param h:height
     * @param color:Color.RED i.e.
     * @return
     */
    public CMatrix drawArc(int r, int c, int w, int h, int sa, int aa, int thickness, Color color) {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.drawArc(ret.image, r, c, w, h, sa, aa, thickness, color);

        return ret;
    }

    /**
     * draw a specified color rectangle onto image from point1 to point 2 use
     * imshow to visualize
     *
     * @param r:row
     * @param c:column
     * @param w:width
     * @param h:height
     * @param color:Color.RED i.e.
     * @return
     */
    public CMatrix fillRect(int r, int c, int w, int h, Color color) {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.fillRectangle(ret.image, r, c, w, h, color);

        return ret;
    }

    /**
     * draw a specified color rectangle onto image from point1 to point 2 use
     * imshow to visualize
     *
     * @param r:row
     * @param c:column
     * @param w:width
     * @param h:height
     * @param color:Color.RED i.e.
     * @return
     */
    public CMatrix drawOval(int r, int c, int w, int h, int thickness, Color color) {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.drawOval(ret.image, r, c, w, h, thickness, color);

        return ret;
    }

    /**
     * draw a specified color rectangle onto image from point1 to point 2 use
     * imshow to visualize
     *
     * @param r:row
     * @param c:column
     * @param w:width
     * @param h:height
     * @param color:Color.RED i.e.
     * @return
     */
    public CMatrix fillOval(int r, int c, int w, int h, Color color) {
        CMatrix ret = this.clone(this);

        Graphics2D g2d = (Graphics2D) ret.image.getGraphics();
        g2d.setColor(color);
        g2d.fillOval(c, r, w, h);

        return ret;
    }

//    /**
//     * draw a specified color rectangle onto image from point1 to point 2 use
//     * imshow to visualize
//     *
//     * @param p1
//     * @param p2
//     * @param color
//     * @return
//     */
//    public CMatrix drawRect(CPoint p1, int w, int h,int th, Color color) {
//        return drawRect(p1.row, p1.column, w, h,th, color);
//    }
    /**
     * convert to original image type to desired type
     *
     * @param newType:BufferedImage types
     * @return
     */
    public CMatrix toNewColorSpace(int newType) {
        CMatrix ret = this.clone(this);

        if (ret.image == null) {
            ret.image = FactoryImageProcess.pixelsToImageGray(FactoryUtils.toIntArray2D(array));
        }
        ret.image = FactoryImageProcess.toNewColorSpace(ret.image, newType);
//        ret.array = ImageProcess.imageToPixels255Double(ret.image);

        return ret;
    }

    /**
     * Discrete Cosine Transform Note that width and height of the matrix or
     * image should be 8's power
     *
     * @return
     */
    public CMatrix transformDCT() {
        CMatrix ret = this.clone(this);

        if (ret.image == null) {
            ret.image = FactoryImageProcess.pixelsToImageGray(ret.array);
        }
        ret.image = FactoryImageProcess.DCT(ret.image);
        ret.array = FactoryImageProcess.imageToPixelsDouble(ret.image);

        return ret;
    }

    /**
     * Matlab compatible command: Discrete Cosine Transform, Note that width and
     * height of the matrix or image should be 8's power
     *
     * @return CMatrix
     */
    public CMatrix dct() {
        return transformDCT();
    }

    /**
     * B. All the well known transfer/transform/filter functions should be here
     */
    /**
     * Medikal Görüntülemedeki Computed Tomograpghy nin radon transferi matrisi
     * sinograph eğrilerine dönüştürür
     *
     * @param numberOfAngles
     * @param numberOfProjections
     * @return
     */
    public CMatrix transformRadonForward(int numberOfAngles, int numberOfProjections) {
        CMatrix ret = this.clone(this);

        ret.array = TransformRadon.forwardProjection(ret.array, numberOfAngles, numberOfProjections);
//        returnedValue.array=FactoryNormalization.normalizeWithRange(returnedValue.array,0,255);

        return ret;
    }

    /**
     * Medikal Görüntülemedeki Computed Tomograpghy nin radon transferinin tersi
     * işlemi sinograph eğrilerinden asıl görüntüye dönüştürür
     *
     * @param numberOfAngles
     * @param numberOfProjections
     * @return
     */
    public CMatrix transformRadonBackward(int imgSize) {
        CMatrix ret = this.clone(this);

        ret.array = TransformRadon.backwardProjection(ret.array, imgSize);

        return ret;
    }

    /**
     * calculates the fast fourier transform of the real signal. Only positive
     * frequencies are available.
     *
     * @return
     */
    public CMatrix transformFFT() {
        CMatrix ret = this.clone(this).transpose();
        TransformFFT fft = new TransformFFT(ret.getColumnNumber());
        for (int i = 0; i < ret.getRowNumber(); i++) {
            ret.array[i] = fft.calculateFFTMagnitude(ret.array[i]);
        }
        return ret.transpose();
    }

    /**
     * Matlab compatible calculates the fast fourier transform of the real
     * signal. Only positive frequencies are available.
     *
     * @return
     */
    public CMatrix fft() {
        return transformFFT();
    }

    /**
     * Matlab compatible command: values greater than threshold 't' are passed
     *
     * @param d:input matrix
     * @param t:threshold value
     * @return CMatrix
     */
    public CMatrix highPassFilter(double[][] d, int t) {
        CMatrix ret = this.clone(this);

        ret.array = FactoryImageProcess.highPassFilter(ret.array, t);

        return ret;
    }

    /**
     * Matlab compatible command: values greater than threshold 't' are passed
     *
     * @param t:threshold value
     * @return CMatrix
     */
    public CMatrix highPassFilter(int t) {
        CMatrix ret = this.clone(this);

        ret.array = FactoryImageProcess.highPassFilter(ret.array, t);

        return ret;
    }

    public double getRoiMean(double[][] d, CPoint[] p) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public CMatrix thresholdOtsu() {
        return binarizeOtsu();
    }

    public CMatrix threshold(int t) {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.binarizeGrayScaleImage(ret.array, t);
        ret.array = FactoryImageProcess.imageToPixelsDouble(ret.image);

        return ret;
    }

    public CMatrix threshold(int t1, int t2) {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.thresholdGray(ret.image, t1, t2);
        ret.array = FactoryImageProcess.imageToPixelsDouble(ret.image);

        return ret;
    }

    public void holdOn() {
        hold_on = true;
    }

    public void holdOff() {
        hold_on = false;
    }

    public int toplaNewApproach(int... a) {
        int t = 0;
        for (int i = 0; i < a.length; i++) {
            t += a[i];
        }
        return t;
    }

    public CPoint getSize() {
        return new CPoint(this.getRowNumber(), this.getColumnNumber());
    }

    public CSize getImageSize() {
        return new CSize(this.getColumnNumber(), this.getRowNumber());
    }

    public CMatrix serialize(String fileName) {
        try {
            FactoryUtils.serialize(this, fileName);
        } catch (IOException ex) {
            Logger.getLogger(CMatrix.class.getName()).log(Level.SEVERE, null, ex);
        }
        return this;
    }

    public CMatrix deSerialize(String fileName) {
        CMatrix cm = CMatrix.getInstance();
        try {
            cm = (CMatrix) FactoryUtils.deserialize(fileName);
        } catch (IOException ex) {
            Logger.getLogger(CMatrix.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CMatrix.class.getName()).log(Level.SEVERE, null, ex);
        }

        return cm;
    }

    /**
     * Matlab compatible see code of imnoise in Matlab
     *
     * @return
     */
    public CMatrix imnoise() {
        CMatrix ret = this.clone(this);

//        ret.array = FactoryUtils.addGaussianNoise(ret.array, 0, 0.1);
        ret.array = FactoryUtils.addSaltAndPepperNoise(ret.array, 0.1);
        ret.image = FactoryImageProcess.pixelsToImageGray(ret.array);

        return ret;
    }

    /**
     * Matlab compatible see code of imnoise in Matlab
     *
     * @param m
     * @param v
     * @return
     */
    public CMatrix imnoise(double m, double v) {
        CMatrix ret = this.clone(this);

        ret.array = FactoryUtils.addGaussianNoise(ret.array, m, v);
        ret.image = FactoryImageProcess.pixelsToImageGray(ret.array);

        return ret;
    }

    /**
     * split method separates CMatrix into nFolds disjoint subset according to
     * the specified dimension last subset generally greater and equal to the
     * previous subset if number of rows can not be separated equally.
     *
     * split metodu CMatrix matrisini kesişmesi olmayan nFold adet alt kümeye
     * ayırır en son alt kümenin eleman sayısı eğer ki tam bölünemiyorsa
     * genellikle öncekilerden büyük eşittir
     *
     * @param nFolds
     * @return array of CMatrix
     */
    public CMatrix[] split(int nFolds) {
        CMatrix randData = this.clone(this);

        CMatrix[] ret = new CMatrix[nFolds];
        int nRows = randData.getRowNumber();
        int nCols = randData.getColumnNumber();
        int delta = nRows / nFolds;
        for (int i = 0; i < nFolds - 1; i++) {
            ret[i] = randData.commandParser(i * delta + ":" + ((i + 1) * delta - 1), ":");//.println((i + 1) + ".subset");
        }
        CMatrix cm = CMatrix.getInstance().zeros(1, nCols);
        for (int i = (nFolds - 1) * delta; i < nRows; i++) {
            CMatrix temp = randData.getRowMatrix(i).transpose();
            cm = cm.cat(2, temp);
        }
        cm = cm.deleteRow(0);
        ret[nFolds - 1] = cm;//.println((nFolds) + ".subset");
        return ret;
    }

    /**
     * splitTestAndTrain method separates CMatrix Test and Train set based on
     * the ntrain and ntest values. ratio ranges between 0 and 1 and takes
     * floating number. 4 , 1 means 0.75 75% is train and 25% is test. It
     * returns CMatrix[0] as train and CMatrix[1] as test sets.
     *
     * splitTestAndTrain komutu parametrede belirtilmiş ntrain ve ntest
     * değerlerinin oranı reel sayı (0..1) arasında değişir. Verisetini test ve
     * train kümesine ayırır. 4 , 1 girilmesi durumunda oran 0.75 olacağından,
     * %75 train için , %25 test için ayırır. Geriye CMatrix[0] train, ve
     * CMatrix[1] ise test set olarak gönderir.
     *
     * @param nFolds
     * @return array of CMatrix
     */
    public CMatrix[] splitTestAndTrain(int ntrain, int ntest) {
        CMatrix ds = this.clone(this);

        CMatrix[] ret = new CMatrix[2];
        double r = 1.0 * ntrain / (ntrain + ntest);
        int pos = (int) (ds.getRowNumber() * r);
        ret[0] = ds.cmd("0:" + pos, ":");
        ret[1] = ds.cmd(pos + ":end", ":");
        return ret;
    }

    /**
     * splitTestAndTrain method separates CMatrix Test and Train set based on
     * the ratio. ratio ranges between 0 and 1 and takes floating number. 0.75
     * means 75% is train and 25% is test. It returns CMatrix[0] as train and
     * CMatrix[1] as test sets.
     *
     * splitTestAndTrain komutu parametrede belirtilmiş reel sayı (0..1)
     * oranında verisetini test ve train kümesine ayırır. 0.75 girilmesi
     * durumunda, %75 train için , %25 test için ayırır. Geriye CMatrix[0]
     * train, ve CMatrix[1] ise test set olarak gönderir.
     *
     * @param nFolds
     * @return array of CMatrix
     */
    public CMatrix[] splitTestAndTrain(double r) {
        CMatrix ds = this.clone(this);

        CMatrix[] ret = new CMatrix[2];
        int pos = (int) (ds.getRowNumber() * r);
        ret[0] = ds.cmd("0:" + pos, ":");
        ret[1] = ds.cmd(pos + ":end", ":");
        return ret;
    }

    /**
     * Exclude operates as setdiff method in Matlab it simply try to get rid off
     * values from the original matrix if matrix size is in accordance based on
     * rows or columns logic
     *
     * please see cvSets or crossValidationSets for further info
     *
     * @param cm
     * @param dimension : 1=exclude from rows, 2=exclude from columns
     * @return
     */
    public CMatrix exclude(CMatrix cm, int dimension) {
        CMatrix ret = this.clone(this);

        if (dimension == 1 && ret.getColumnNumber() != cm.getColumnNumber()) {
            System.out.println("column number must be equal");
            return ret;
        }
        if (dimension == 2 && ret.getRowNumber() != cm.getRowNumber()) {
            System.out.println("row number must be equal");
            return ret;
        }
        if (dimension == 1 && ret.getColumnNumber() == cm.getColumnNumber()) {
            double[][] d = FactoryMatrix.excludeRows(ret.array, cm.array);
            ret.setArray(d);
        }
        if (dimension == 2 && ret.getRowNumber() == cm.getRowNumber()) {
            ret = ret.transpose().exclude(cm.transpose(), 1).transpose();
        }
        return ret;
    }

    /**
     * it splits the dataset into nFolds disjoint folds for test and remaining
     * as train sets. Hence, it holds 2D CMatrix array from which, first
     * dimensions train and second one is test
     *
     * @param nFolds
     * @return
     */
    public CMatrix[][] crossValidationSets(int nFolds) {
        CMatrix randData = this.clone(this);
        CMatrix[][] ret = new CMatrix[nFolds][2];
        int nRows = randData.getRowNumber();
        int nCols = randData.getColumnNumber();
        int delta = nRows / nFolds;
        for (int i = 0; i < nFolds - 1; i++) {
            if (i == 0) {
                ret[i][0] = randData.commandParser(((i + 1) * delta) + ":end", ":");
            } else {
                ret[i][0] = randData.commandParser("0:" + ((i * delta) - 1), ":").cat(2, randData.commandParser(((i + 1) * delta) + ":end", ":"));
            }
            ret[i][1] = randData.commandParser(i * delta + ":" + ((i + 1) * delta - 1), ":");//.println((i + 1) + ".subset");
        }
        CMatrix cm = CMatrix.getInstance().zeros(1, nCols);
        for (int i = (nFolds - 1) * delta; i < nRows; i++) {
            CMatrix temp = randData.getRowMatrix(i).transpose();
            cm = cm.cat(2, temp);
        }
        cm = cm.deleteRow(0);
        ret[nFolds - 1][1] = cm;
        ret[nFolds - 1][0] = randData.commandParser("0:" + (((nFolds - 1) * delta) - 1), ":");
        return ret;

//        CMatrix cm=this.clone(this); lastCM=ret; 
//        CMatrix[] tests=cm.split(nFolds);
//        CMatrix[][] ret=new CMatrix[nFolds][2];
//        for (int i = 0; i < nFolds; i++) {
//            ret[i][0]=cm.exclude(tests[i], 1);
//            ret[i][1]=tests[i];
//        }
//        return ret;
    }

    public double getMaxTotal() {
        return FactoryUtils.getMaximum(this.array);
    }

    public double getMinTotal() {
        return FactoryUtils.getMinimum(this.array);
    }

    /**
     * converts matrix to 1 dimensional column vector it calls reshape command
     *
     * @return
     */
    public CMatrix toColumnVector() {
        CMatrix ret = this.clone(this);

        ret = ret.reshape(ret.getRowNumber() * ret.getColumnNumber(), 1);
        return ret;
    }

    /**
     * converts matrix to 1 dimensional row vector it calls reshape command
     *
     * @return
     */
    public CMatrix toRowVector() {
        CMatrix ret = this.clone(this);

        ret = ret.reshape(1, ret.getRowNumber() * ret.getColumnNumber());
        return ret;
    }

    public CMatrix jacobianApproximation(CMatrix A, CMatrix b, double tol) {
        CMatrix ret = this.clone(this);

        double error = 0;
        int n = b.getRowNumber();
        double s = 0;
        double xb = 0;
        double w = 1.2;//relaxation number
        double[] x0 = new double[b.getRowNumber()];
        for (int t = 0; t < 2000; t++) {
            error = 0;
            for (int i = 0; i < n; i++) {
                s = 0;
                xb = x0[i];
                for (int j = 0; j < n; j++) {
                    if (i != j) {
                        s = s + A.getValue(i, j) * x0[j];
                    }

                }
                x0[i] = w * (b.toDoubleArray1D()[i] - s) / (A.getValue(i, i)) + (1 - w) * x0[i];
                error += Math.abs(x0[i] - xb);
            }
            if (error / n < tol) {
                break;
            }
        }
        ret.setArray(x0);
        return ret;
    }

    public CMatrix jacobianApproximation(CMatrix b, double tol) {
        CMatrix A = this.clone(this);

        double error = 0;
        int n = b.getRowNumber();
        double s = 0;
        double xb = 0;
        double w = 1.2;//relaxation number
        double[] x0 = new double[b.getRowNumber()];
        for (int t = 0; t < 2000; t++) {
            error = 0;
            for (int i = 0; i < n; i++) {
                s = 0;
                xb = x0[i];
                for (int j = 0; j < n; j++) {
                    if (i != j) {
                        s = s + A.getValue(i, j) * x0[j];
                    }

                }
                x0[i] = w * (b.toDoubleArray1D()[i] - s) / (A.getValue(i, i)) + (1 - w) * x0[i];
                error += Math.abs(x0[i] - xb);
            }
            if (error / n < tol) {
                break;
            }
        }
        CMatrix ret = CMatrix.getInstance(x0);

        return ret;
    }

    /**
     * csvread is similar to the Matlab command and needs only file path of
     * desired excel file
     *
     * @param filePath : excel file path
     * @return CMatrix
     */
    public CMatrix csvread(String filePath) {
        CMatrix ret = this.clone(this);

        ret = CMatrix.getInstance(FactoryUtils.readCSV(filePath, ',', 0));
        return ret;
    }

    public CMatrix csvread(String filePath, char seperator, int header) {
        CMatrix ret = this.clone(this);

        ret = CMatrix.getInstance(FactoryUtils.readCSV(filePath, seperator, header));
        return ret;
    }

    /**
     * check matrix number of rows and columns it should be identical or equal
     * or same
     *
     * @param cm : checked matrix
     * @return boolean
     */
    public boolean isIdentical(CMatrix cm1, CMatrix cm2) {
        if (cm1.getRowNumber() == cm2.getRowNumber() && cm1.getColumnNumber() == cm2.getColumnNumber()) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * check matrix number of rows and columns it should be identical or equal
     * or same
     *
     * @param cm : checked matrix
     * @return boolean
     */
    public boolean isIdentical(CMatrix cm) {
        if (this.getRowNumber() == cm.getRowNumber() && this.getColumnNumber() == cm.getColumnNumber()) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Matlab compatible padding around the matrix with value padding amount is
     * determined by nr and nc
     *
     * @param nr: padding number of rows (padding width as vertical)
     * @param nc: padding number of columns (padding width as horizontal)
     * @param val : padding value
     * @return CMatrix
     */
    public CMatrix padarray(int nr, int nc, double val) {
        CMatrix ret = this.clone(this);

        ret = CMatrix.getInstance(FactoryMatrix.padarray(ret.array, nr, nc, val));
        return ret;
    }

    public CMatrix detectFaces(String type) {
        return new CMatrix(FactoryImageProcess.detectFaces(type, this.image));
    }

    public Rectangle[] getFaceLocations(String type) {
        Rectangle[] ret = FactoryImageProcess.getFacesRectangles(type, this.image);
        return ret;
    }

    public CMatrix imupdate() {
        if (image == null || image.getType() == BufferedImage.TYPE_BYTE_GRAY) {
            image = FactoryImageProcess.pixelsToImageGray(array);
        }
        return this;
    }

    public CMatrix updateImage() {
        return imupdate();
    }

    public CMatrix im2bw() {
        CMatrix cm = this.clone(this);

        if (cm.image.getType() != BufferedImage.TYPE_BYTE_GRAY) {
            cm = cm.rgb2gray();
        }
        cm = cm.binarizeOtsu();
        return cm;
    }

    public CMatrix im2bw(int thr) {
        CMatrix cm = this.clone(this);

        if (cm.image.getType() != BufferedImage.TYPE_BYTE_GRAY) {
            cm = cm.rgb2gray();
        }
        cm = cm.threshold(thr);

        return cm;
    }

    public CMatrix im2bw(int t1, int t2) {
        CMatrix cm = this.clone(this);

        if (cm.image.getType() != BufferedImage.TYPE_BYTE_GRAY) {
            cm = cm.rgb2gray();
        }
        cm = cm.imthreshold(t1, t2);

        return cm;
    }

    public CMatrix imbinarizeOtsu() {
        CMatrix cm = this.clone(this);

        if (cm.image.getType() != BufferedImage.TYPE_BYTE_GRAY) {
            cm = cm.rgb2gray();
        }
        cm = cm.binarizeOtsu();

        return cm;
    }

    /**
     * perform image binarization operation by using otsu thresholding
     *
     * @return
     */
    public CMatrix binarizeImage() {
        return im2bw();
    }

    public CMatrix binarizeImage(int thr) {
        return im2bw(thr);
    }

    private CMatrix imthreshold(int t1, int t2) {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.adaptiveThreshold(ret.array, t1, t2);
        ret.array = FactoryImageProcess.imageToPixelsDouble(ret.image);
        return ret;
    }

    public CMatrix overlay(CMatrix cm, double alpha) {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.overlayImage(ret.image, cm.image, alpha);
        return ret;
    }

    public CMatrix overlay(BufferedImage bf, double alpha) {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.overlayImage(ret.image, bf, alpha);
        return ret;
    }

    public CMatrix overlay(CMatrix cm, float alpha, CRectangle cr) {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.overlayImage(ret.image, cm.image, cr, 0);
        return ret;
    }

    public CMatrix overlay(CMatrix cm, CPoint cp) {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.overlayImage(ret.image, cm.image, cp, 0);
        return ret;
    }

    public CMatrix overlay(BufferedImage bf, CPoint cp) {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.overlayImage(ret.image, bf, cp, 0);
        return ret;
    }

    public CMatrix overlay(CMatrix cm, CPoint cp, int backGroundColor) {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.overlayImage(ret.image, cm.image, cp, backGroundColor);
        return ret;
    }

    public CMatrix im_cropBoundingBox() {
        CMatrix ret = this.clone(this);

        ret.image = FactoryImageProcess.cropBoundingBox(ret.image);
        ret.array = FactoryImageProcess.imageToPixelsDouble(ret.image);
        return ret;
    }

    public CMatrix reverseOrder() {
        CMatrix ret = this.clone(this);

        ret.array = FactoryMatrix.reverseOrder(ret.array);
        return ret;
    }

    public CMatrix bitPlaneMSB() {
        CMatrix ret = this.clone(this);

        ret.array = FactoryMatrix.bitPlaneMSB(ret.array);
        return ret;
    }

    public CMatrix bitPlane(int n) {
        CMatrix ret = this.clone(this);

        ret.array = FactoryMatrix.bitPlane(ret.array, n);
        return ret;
    }

    /**
     * for compliance with Matlab, native java developer can use bitPlane
     * command instead
     *
     * @param n
     * @return
     */
    public CMatrix bitget(int n) {
        return bitPlane(n);
    }

    public CMatrix imbitget(int n) {
        return bitPlane(n);
    }

    public CMatrix getImageBitSlicing(int n) {
        return bitPlane(n);
    }

    public CMatrix getBitPlane(int n) {
        return bitPlane(n);
    }

    public CMatrix im2QuantizationLevel(int n) {
        if (n >= 256) {
            return this;
        }
        double t = 255.0 / n;
        CMatrix ret = this.clone(this);

        ret = map(0, n).round().timesScalar(t);
        return ret;
    }

    public CMatrix equalizeHistogramMusa() {
        CMatrix ret = this.clone(this);

        ret = ret.getCDFData().map(0, 255).round();
        double[][] data = this.clone(this).toDoubleArray2D();
        double[] ncdf = ret.toDoubleArray1D();
        int val = 0;
        for (int i = 0; i < data.length; i++) {
            for (int j = 0; j < data[0].length; j++) {
                val = (int) data[i][j];
                data[i][j] = ncdf[val];
            }
        }
        ret.setArray(data);
        ret.setImage(FactoryImageProcess.pixelsToImageGray(data));
        return ret;
    }

    public CMatrix histeq() {
        return equalizeHistogram();
    }

    public CMatrix histeqMusa() {
        return equalizeHistogramMusa();
    }

    public CMatrix equalizeHistogram() {
        CMatrix ret = this.clone(this);

        ret.setImage(FactoryImageProcess.equalizeHistogram(ret.image));
        return ret;
    }

    public CPoint getCenterOfGravity() {
        return FactoryImageProcess.getCenterOfGravityGray(array);
    }

    public CMatrix smoothMatrix() {
        CMatrix ret = this.clone(this);

        ret.array = FactoryMatrix.smoothColumns(ret.array, 3);
        ret.updateImage();
        return ret;
    }

    public CMatrix smoothMatrix(int size) {
        CMatrix ret = this.clone(this);

        ret.array = FactoryMatrix.smoothColumns(ret.array, size);
        ret.updateImage();
        return ret;
    }

    public CMatrix smoothMatrixTimes(int times) {
        CMatrix ret = this.clone(this);

        for (int i = 0; i < times; i++) {
            ret = ret.smoothMatrix();
        }
        return ret;
    }

    /**
     * param N:for N bit i.e:8 bit produces totally 256 LBP features
     */
    public CMatrix lbp1D(int N, boolean isRegular) {
        return getLBP1D(N, isRegular);
    }

    public CMatrix getLBP1D(int N, boolean isRegular) {
        CMatrix ret = this.clone(this);

        int[][] lbp = FeatureExtractionLBP.getLBP(ret.array, N, isRegular);
        ret.setArray(lbp);
        return ret;
    }

    /**
     * Fast Wavelet Transform Implementation
     *
     * @param type : write "haar" or "db2", "db3", "db4", "db5", "db6", "db7" in
     * a samller case
     * @return
     */
    public CMatrix fwt_1D_decompose(String type) {
        CMatrix ret = this.clone(this);

        ret.setArray(FactoryMatrix.fwt_1D_decompose(ret.toDoubleArray1D(), type));
        return ret;
    }

    /**
     * Discrete Wavelet Transform Implementation
     *
     * @param type : write "haar" or "db2", "db3", "db4", "db5", "db6", "db7" in
     * a samller case
     * @return
     */
    public CMatrix dwt_1D_decompose(String type) {
        return fwt_1D_decompose(type);
    }

    /**
     * Discrete Wavelet Transform Implementation
     *
     * @param type : write "haar" or "db2", "db3", "db4", "db5", "db6", "db7" in
     * a samller case
     * @return
     */
    public CMatrix wavelet_1D_decompose(String type) {
        return fwt_1D_decompose(type);
    }

    /**
     * Discrete Wavelet Transform Implementation
     *
     * @param type : write "haar" or "db2", "db3", "db4", "db5", "db6", "db7" in
     * a samller case
     * @return
     */
    public CMatrix transformWavelet_1d_decompose(String type) {
        return fwt_1D_decompose(type);
    }

    /**
     * Fast Wavelet Transform Implementation
     *
     * @param type : write "haar" or "db2", "db3", "db4", "db5", "db6", "db7" in
     * a samller case
     * @param depth: write decomposition level
     * @return
     */
    public CMatrix fwt_forward(String type, int depth) {
        CMatrix ret = this.clone(this);

        ret.setArray(FactoryMatrix.fwt_1D_forward(ret.toDoubleArray1D(), type, depth));
        return ret;
    }

    /**
     * Discrete Wavelet Transform Implementation
     *
     * @param type : write "haar" or "db2", "db3", "db4", "db5", "db6", "db7" in
     * a samller case
     * @param depth: write decomposition level
     * @return
     */
    public CMatrix dwt_forward(String type, int depth) {
        return fwt_forward(type, depth);
    }

    /**
     * Discrete Wavelet Transform Implementation
     *
     * @param type : write "haar" or "db2", "db3", "db4", "db5", "db6", "db7" in
     * a samller case
     * @param depth: write decomposition level
     * @return
     */
    public CMatrix wavelet_forward(String type, int depth) {
        return fwt_forward(type, depth);
    }

    /**
     * Discrete Wavelet Transform Implementation
     *
     * @param type : write "haar" or "db2", "db3", "db4", "db5", "db6", "db7" in
     * a samller case
     * @param depth: write decomposition level
     * @return
     */
    public CMatrix transformWavelet_forward(String type, int depth) {
        return fwt_forward(type, depth);
    }

    /**
     * Fast Wavelet Transform Implementation
     *
     * @param type : write "haar" or "db2", "db3", "db4", "db5", "db6", "db7" in
     * a samller case
     * @param depth: write decomposition level
     * @return
     */
    public CMatrix fwt_reverse(String type, int depth) {
        CMatrix ret = this.clone(this);

        ret.setArray(FactoryMatrix.fwt_1D_reverse(ret.toDoubleArray1D(), type, depth));
        return ret;
    }

    /**
     * Discrete Wavelet Transform Implementation
     *
     * @param type : write "haar" or "db2", "db3", "db4", "db5", "db6", "db7" in
     * a samller case
     * @param depth: write decomposition level
     * @return
     */
    public CMatrix dwt_reverse(String type, int depth) {
        return fwt_reverse(type, depth);
    }

    /**
     * Discrete Wavelet Transform Implementation
     *
     * @param type : write "haar" or "db2", "db3", "db4", "db5", "db6", "db7" in
     * a samller case
     * @param depth: write decomposition level
     * @return
     */
    public CMatrix wavelet_reverse(String type, int depth) {
        return fwt_reverse(type, depth);
    }

    /**
     * Discrete Wavelet Transform Implementation
     *
     * @param type : write "haar" or "db2", "db3", "db4", "db5", "db6", "db7" in
     * a samller case
     * @param depth: write decomposition level
     * @return
     */
    public CMatrix transformWavelet_reverse(String type, int depth) {
        return fwt_reverse(type, depth);
    }

    /**
     * link (things) together in a chain or series according to rows
     *
     * @return
     */
    public CMatrix concatenateRows() {
        CMatrix ret = this.clone(this);

        ret.setArray(FactoryMatrix.concatenateRows(ret.array));
        return ret;
    }

    /**
     * link (things) together in a chain or series according to columns
     *
     * @return
     */
    public CMatrix concatenateColumns() {
        CMatrix ret = this.clone(this);

        ret.setArray(FactoryMatrix.concatenateColumns(ret.array));
        return ret;
    }

    public double[][][] getARGB() {
        return FactoryImageProcess.imageToPixelsColorDoubleFaster(image);
    }

    public CMatrix argbToBufferedImage(double[][][] argb) {
        return fromARGB(argb);
    }

    public CMatrix fromARGB(double[][][] argb) {
        BufferedImage img = FactoryImageProcess.pixelsToImageColorArgbFormat(argb);
        return new CMatrix(img);
    }

    public CMatrix fromARGB(CMatrix[] cms) {
        double[][][] argb = new double[4][][];
        for (int i = 0; i < cms.length; i++) {
            argb[i] = cms[i].array;
        }
        BufferedImage img = FactoryImageProcess.pixelsToImageColorArgbFormat(argb);
        return new CMatrix(img);
    }

    public CMatrix highPass(CMatrix cm) {
        CMatrix ret = this.clone(this);

        double[][] d = FactoryMatrix.highPass(ret.array, cm.array);
        ret.setArray(d);
        return ret;
    }

    public CMatrix lowPass(CMatrix cm) {
        CMatrix ret = this.clone(this);

        double[][] d = FactoryMatrix.lowPass(ret.array, cm.array);
        ret.setArray(d);
        return ret;
    }

    public CMatrix[] toARGB() {
        long t1 = FactoryUtils.tic();
        CMatrix[] ret = new CMatrix[4];
        double[][][] d = toDoubleArray3D();
        t1 = FactoryUtils.toc("cost of to double array conversion:", t1);
        for (int i = 0; i < ret.length; i++) {
            ret[i] = new CMatrix(d[i]);
        }
        t1 = FactoryUtils.toc("cost of building new CMatrix:", t1);
        return ret;
    }

    /**
     * improved version of plot, based on javafx charts
     *
     * @return
     */
    public CMatrix plotFX() {
        new ControllerFXCharts(this).show();
        return this;
    }

    /**
     * improved version of plot, based on javafx charts
     *
     * @param title : Title of the chart
     * @return
     */
    public CMatrix plotFX(String title) {
        new ControllerFXCharts(this).show(title);
        return this;
    }

    /**
     * improved version of plot, based on javafx charts
     *
     * @param title : Title of the chart
     * @param xAxisLabel : label of the x axis
     * @param yAxisLabel : label of the y axis
     * @return
     */
    public CMatrix plotFX(String title, String xAxisLabel, String yAxisLabel) {
        new ControllerFXCharts(this).show(title, xAxisLabel, yAxisLabel);
        return this;
    }

    /**
     * improved version of plot, based on javafx charts
     *
     * @param lst : column names
     * @return
     */
    public CMatrix setColumnNames(List<String> lst) {
        this.columnNames = lst;
        return this;
    }

    public List<String> getColumnNames() {
        return columnNames;
    }

    public List getClassLabels() {
        return classLabels;
    }

    public CMatrix setClassLabels(List classLabels) {
        this.classLabels = classLabels;
        return this;
    }

    /**
     * wait in milli seconds
     *
     * @param milli_second : milli second
     * @return
     */
    public CMatrix delay(int milli_second) {
        try {
            Thread.sleep(milli_second);
        } catch (InterruptedException ex) {
            Logger.getLogger(CMatrix.class.getName()).log(Level.SEVERE, null, ex);
        }
        return this;
    }

    public CMatrix setXData4FX(double[] d) {
        this.xData4FX = d;
        return this;
    }

    public double[] getXData4FX() {
        return xData4FX;
    }

    /**
     * sort matrix (column wised) along ascending order similar to the Matlab
     * sort function
     *
     * @return
     */
    public CMatrix sort() {
        CMatrix ret = this.clone(this);

        double[][] d = FactoryMatrix.sort(ret.array, "column", "ascend");
        ret.setArray(d);
        return ret;
    }

    /**
     * sort matrix (column wised) along ascending order similar to the Matlab
     * sort function
     *
     * @param dimension : sorting along which dimension; select "column" or
     * "row"
     * @return
     */
    public CMatrix sort(String dimension) {
        CMatrix ret = this.clone(this);

        double[][] d = FactoryMatrix.sort(ret.array, dimension, "ascend");
        ret.setArray(d);
        return ret;
    }

    /**
     * sort matrix dimension wised selected order similar to the Matlab please
     * choose appropriate String keywords below as it is. sort function
     *
     * @param dimension : sorting along which dimension; select "column" or
     * "row"
     * @param order : in an "ascend" or "descend" order select one of both
     * @return
     */
    public CMatrix sort(String dimension, String order) {
        CMatrix ret = this.clone(this);
        double[][] d = FactoryMatrix.sort(ret.array, dimension, order);
        ret.setArray(d);
        return ret;
    }

    public CMatrix catHorizontal(int dim, int... val) {
        CMatrix ret = this.clone(this);
        double[][] d = FactoryMatrix.catHorizontal(ret.array, val);
        ret.setArray(d);
        return ret;
    }

    public CMatrix catVertical(int dim, int... val) {
        CMatrix ret = this.clone(this);
        double[][] d = FactoryMatrix.catVertical(ret.array, val);
        ret.setArray(d);
        return ret;
    }

    public CMatrix imerode() {
        CMatrix ret = this.clone(this);
        ret.setImage(FactoryImageProcess.erode(ret.getImage()));
        return ret;
    }

    public CMatrix imdilate() {
        CMatrix ret = this.clone(this);
        ret.setImage(FactoryImageProcess.dilate(ret.getImage()));
        return ret;
    }

    /**
     * Calculate Euclidean distance between two vectors
     *
     * @param cm
     * @return
     */
    public CMatrix euc(CMatrix cm) {
        if (!this.isIdentical(cm)) {
            System.err.println("Matrix dimension is not identical");
            return this;
        }
        CMatrix ret = this.clone(this);
        ret = ret.minus(cm).pow(2).sum().sqrt();
        return ret;
    }

    /**
     * Calculate Euclidean distance between two vectors
     *
     * @param cm1
     * @param cm2
     * @return
     */
    public CMatrix euc(CMatrix cm1, CMatrix cm2) {
        if (!cm1.isIdentical(cm2)) {
            System.err.println("Matrix dimension is not identical");
            return this;
        }
        CMatrix ret = cm1.minus(cm2).pow(2).sum().sqrt();
        return ret;
    }

    /**
     * Calculate column based Mean Square Error of two Matrices
     *
     * @param cm
     * @return
     */
    public CMatrix mse(CMatrix cm) {
        if (!this.isIdentical(cm)) {
            System.err.println("Matrix dimension is not identical");
            return this;
        }
        CMatrix ret = this.clone(this);
        ret = ret.minus(cm).pow(2).sum().sum();
        return ret;
    }

    /**
     * Calculate column based Mean Square Error of two Matrices
     *
     * @param cm1
     * @param cm2
     * @return
     */
    public CMatrix mse(CMatrix cm1, CMatrix cm2) {
        if (!cm1.isIdentical(cm2)) {
            System.err.println("Matrix dimension is not identical");
            return this;
        }
        CMatrix ret = cm1.minus(cm2).pow(2).sum().sum();
        return ret;
    }

    /**
     * Calculate column based Mean Square Error of two Matrices
     *
     * @param cm
     * @return
     */
    public CMatrix getMeanSquareError(CMatrix cm) {
        return mse(cm);
    }

    /**
     * Calculate column based Mean Square Error of two Matrices
     *
     * @param cm1
     * @param cm2
     * @return
     */
    public CMatrix getMeanSquareError(CMatrix cm1, CMatrix cm2) {
        return mse(cm1, cm2);
    }

    /**
     * Calculates column based Cosine Similarity between two matrix
     *
     * @param cm
     * @return
     */
    public CMatrix cosineSimilarity(CMatrix cm) {
        if (!this.isIdentical(cm)) {
            System.err.println("Matrix dimension is not identical");
            return this;
        }
        CMatrix ret = this.clone(this);
        double[] d = FactoryUtils.getCosineSimilarity(ret.transpose().array, cm.transpose().array);
        ret.setArray(d);
        return ret;
    }

    /**
     * Replicate/Duplicate the Matrix n times along column
     *
     * @param cm: replicated matrix
     * @param n : n times
     * @return CMatrix
     */
    public CMatrix replicateColumn(CMatrix cm, int n) {
        CMatrix ret2 = cm.clone(this);
        for (int i = 0; i < n - 1; i++) {
            cm = cm.cat(1, ret2);
        }
        return cm;
    }

    /**
     * Replicate/Duplicate the Matrix n times along column
     *
     * @param n
     * @return
     */
    public CMatrix replicateColumn(int n) {
        CMatrix ret = this.clone(this);
        CMatrix ret2 = this.clone(this);
        for (int i = 0; i < n - 1; i++) {
            ret = ret.cat(1, ret2);
        }
        return ret;
    }

    /**
     * Replicate/Duplicate the Matrix n times along column
     *
     * @param n
     * @return
     */
    public CMatrix duplicateColumn(int n) {
        return replicateColumn(n);
    }

    /**
     * Replicate/Duplicate the Matrix n times along row
     *
     * @param cm: replicated matrix
     * @param n : n times
     * @return CMatrix
     */
    public CMatrix replicateRow(CMatrix cm, int n) {
        CMatrix ret2 = cm.clone(this);
        for (int i = 0; i < n - 1; i++) {
            cm = cm.cat(2, ret2);
        }
        return cm;
    }

    /**
     * Replicate/Duplicate the Matrix n times along row
     *
     * @param n
     * @return
     */
    public CMatrix replicateRow(int n) {
        CMatrix ret = this.clone(this);
        CMatrix ret2 = this.clone(this);
        for (int i = 0; i < n - 1; i++) {
            ret = ret.cat(2, ret2);
        }
        return ret;
    }

    /**
     * Replicate/Duplicate the Matrix n times along row
     *
     * @param n
     * @return
     */
    public CMatrix duplicateRow(int n) {
        return replicateRow(n);
    }

    /**
     * similar to python make_blobs generate data set with a number of centers
     * of Gaussian distribution based on given n_samples and
     * n_features(dimension) class labels (centers) can be accessed via
     * getClassLabel method columns are n_features rows are n_samples hint: you
     * can best visualize the dataset by using scatter method
     *
     * @param n_samples
     * @param n_features
     * @param centers
     * @return
     */
    public CMatrix make_blobs(int n_samples, int n_features, int centers) {
        return make_blobs(n_samples, n_features, centers, 100, 5);
    }

    /**
     * similar to python; make_blobs generate data set with a number of centers
     * of Gaussian distribution based on given n_samples and
     * n_features(dimension) class labels (centers) can be accessed via
     * getClassLabel method columns are n_features rows are n_samples hint: you
     * can best visualize the dataset by using scatter method
     *
     * @param n_samples
     * @param n_features
     * @param centers
     * @param mean_scale
     * @param var_scale
     * @return
     */
    public CMatrix make_blobs(int n_samples, int n_features, int centers, int mean_scale, int var_scale) {
        if (n_samples < centers) {
            return this;
        }
        CMatrix ret = this.clone(this);
        int nRows = n_samples / centers;
        ret = ret.zeros(nRows, n_features + 1);
        Random r = new SecureRandom();
        for (int i = 0; i < centers; i++) {
            CMatrix cm = CMatrix.getInstance().zeros(nRows, 1);
            double var = Math.sqrt(var_scale) + Math.random() * var_scale;
            for (int j = 0; j < n_features; j++) {
                cm = cm.cat(1, CMatrix.getInstance().randnMeanVariance(nRows, 1, r.nextDouble() * mean_scale - mean_scale / 2, var));
            }
            cm = cm.deleteColumn(0);
            cm = cm.cat(1, CMatrix.getInstance().ones(nRows, 1).multiplyScalar(i));
            ret = ret.cat(2, cm);
        }
        ret = ret.cmd("100:end", ":");
        ret = ret.shuffleRows();
        double[] cl = ret.getLastColumn();
        ret.setClassLabels(Arrays.asList(cl));
        return ret;
    }

    /**
     * set SecureRandom seed in order to guarantee the same results for each
     * draw
     *
     * @param n
     * @return
     */
    public CMatrix random_seed(int n) {
        random = new SecureRandom();
        random.setSeed(n);
        return this;
    }
    
    /**
     * set SecureRandom seed in order to guarantee the same results for each
     * draw
     *
     * @param n
     * @return
     */
    public CMatrix random_seed(Object n) {
        random = new SecureRandom();
        return this;
    }

    /**
     * set SecureRandom seed in order to guarantee the same results for each
     * draw
     *
     * @param n
     * @return
     */
    public CMatrix setRandomSeed(int n) {
        return random_seed(n);
    }

    /**
     * set SecureRandom seed in order to guarantee the same results for each
     * draw
     *
     * @param n
     * @return
     */
    public CMatrix setRandomSeed(Object n) {
        return random_seed(n);
    }

    /**
     * select n random sample from the matrix mxn, if mxn is normal matrix it
     * selects random n rows, if mxn is column vector it selects random n rows, if
     * mxn is row vector it selects random n column
     *
     * @param n
     * @return
     */
    public CMatrix random_sample(int n) {
        CMatrix ret = this.clone(this);
        int nr = ret.getRowNumber();
        int nc = ret.getColumnNumber();
        int[] index = FactoryMatrix.rand(n, nr, random);
        if (nr > 1 && nc >= 1) {            
            double[][] d = new double[n][nc];
            for (int i = 0; i < n; i++) {
                d[i] = ret.array[index[i]];
            }
            ret=ret.setArray(d);
        } else if (nr == 1) {
            double[] d=new double[n];
            double[] ref=ret.toDoubleArray1D();
            for (int i = 0; i < n; i++) {
                d[i]=ref[index[i]];
            }
            ret=ret.setArray(d);
        } 
        return ret;
    }

}
